<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My blog</title>
    <link>https://firelightflagboy.github.io/</link>
    <description>Recent content on My blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 24 Sep 2020 17:35:56 +0200</lastBuildDate>
    
	<atom:link href="https://firelightflagboy.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What is SRP</title>
      <link>https://firelightflagboy.github.io/posts/glossary/srp/</link>
      <pubDate>Thu, 24 Sep 2020 17:35:56 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/glossary/srp/</guid>
      <description>SRP stand for Single Responsibility Principle.
What is the meaning behind SRP The class/module should have only one responsibility or one reason to change.
Example class Book { public String getTitle() { ... } public String getAuthor() { ... } public void turnPage() { ... } public void printCurrentPage() { ... } } Here the class Book as two different uses:
 Book Management Data presentation  Corrected class Book { public String getTitle() { .</description>
    </item>
    
    <item>
      <title>Add N Prime</title>
      <link>https://firelightflagboy.github.io/posts/technical-test/add-n-prime/</link>
      <pubDate>Wed, 23 Sep 2020 11:28:52 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/technical-test/add-n-prime/</guid>
      <description>This is the recap of a live coding during a meeting with a company.
I was in front of a jury of 3 people.
The goal of this test was more for the jury to know how I work on a specific feature/project, rather than creating an optimized code in live.
Assessment Write a function in Java that take 1 integer argument N and return 1 integer argument. The returned integer is the sum of N prime number.</description>
    </item>
    
    <item>
      <title>Ansible Basic Tutorial</title>
      <link>https://firelightflagboy.github.io/posts/ansible-tutorial/</link>
      <pubDate>Fri, 21 Aug 2020 13:07:38 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/ansible-tutorial/</guid>
      <description>Hi, for this tutorial, I will present you how to use Ansible
What is Ansible Ansible can be defined with the first line with the following sentences
 Ansible is an IT automation tool. It can configure systems, deploy software, and orchestrate more advanced IT tasks such as continuous deployments or zero downtime rolling updates.
@docs.ansible.com
 Basic requirements For Ansible to work, we need 2 things
 A Unix host A target with a ssh server and python3  Setup Ansible If you not already have Ansible do the following or see the Ansible installation Guide</description>
    </item>
    
    <item>
      <title>What is ACL</title>
      <link>https://firelightflagboy.github.io/posts/glossary/acl/</link>
      <pubDate>Thu, 20 Aug 2020 12:04:27 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/glossary/acl/</guid>
      <description>ACL for Access Control List is a list of permission. That list can specify whom have access to the file and the operations permitted on it.
ACL can be retrieved using the command getfacl, here is the following output of that command:
getfacl: Removing leading &amp;#39;/&amp;#39; from absolute path names # file: opt/openarenaserver # owner: root # group: root user::rwx user:level05:rwx user:flag05:rwx group::r-x mask::rwx other::r-x default:user::rwx default:user:level05:rwx default:user:flag05:rwx default:group::r-x default:mask::rwx default:other::r-x Source  Wikipedia  </description>
    </item>
    
    <item>
      <title>How to create a Minecraft server using Docker</title>
      <link>https://firelightflagboy.github.io/posts/docker-minecraft/</link>
      <pubDate>Tue, 18 Aug 2020 11:24:50 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/docker-minecraft/</guid>
      <description>Introduction I want to create a Minecraft server using docker.
For this tutorial, I&amp;rsquo;ll use Minecraft version 1.16.1.
The goal of this tutorial:
 Create a Minecraft server Use Docker to run the server in a container Being able to select the version of the server  The API Minecraft has an API to access and retrieve every available version.
The version manifest is available here, as you can see it&amp;rsquo;s a plain json file that contains all versions published.</description>
    </item>
    
    <item>
      <title>What is TOCTOU</title>
      <link>https://firelightflagboy.github.io/posts/glossary/toctou/</link>
      <pubDate>Mon, 17 Aug 2020 14:23:18 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/glossary/toctou/</guid>
      <description>TOCTOU mean Time-of-Check to Time-of-Use. It&amp;rsquo;s a bug where it involves checking the state of the system and using the result.
Example if (access(&amp;#34;file&amp;#34;, W_OK) != 0) { exit(1); } fd = open(&amp;#34;file&amp;#34;, O_WRONLY); write(fd, buffer, sizeof(buffer)); Here an attacker can create a symlink after the access but before the open call, resulting in a malicious file to be open.
Synonyms  TOCTTOU TOC/TOU  Source  Wikipedia  </description>
    </item>
    
    <item>
      <title>What is Symlink</title>
      <link>https://firelightflagboy.github.io/posts/glossary/symlink/</link>
      <pubDate>Mon, 03 Aug 2020 18:26:16 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/glossary/symlink/</guid>
      <description>A symbolic link is a file that contains a reference to another file.
That reference take form as a path in its absolute or relative form.
A symlink may contains a path that point to nothing
Synonym  symlink soft link  </description>
    </item>
    
    <item>
      <title>Snowcrash - Level14</title>
      <link>https://firelightflagboy.github.io/posts/snowcrash/level14/</link>
      <pubDate>Mon, 03 Aug 2020 15:59:10 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/snowcrash/level14/</guid>
      <description>On connection, we arrived on a empty home dir.
$ ls -l total 0 After searching for a file that is related to flag14 but found nothing.
We try to inspect getflag, the binary that give us the flag for all the previous level
Pseudo Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75  #include &amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>Snowcrash - Level13</title>
      <link>https://firelightflagboy.github.io/posts/snowcrash/level13/</link>
      <pubDate>Mon, 03 Aug 2020 15:58:10 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/snowcrash/level13/</guid>
      <description>On our home DIR, we have a binary level13.
By executing it, we see that he check if we have the correct UID for using it
$ ./level13 UID 2013 started us but we we expect 4242 $ id uid=2013(level13) gid=2013(level13) groups=2013(level13),100(users) Pseudo Code #define UID 4242  void main(void) { uid_t uid; char *token; uid = getuid(); if (uid != UID) { printf(&amp;#34;UID %d started us but we we expect %d\n&amp;#34;, getuid(), UID); exit(1); } token = ft_des(&amp;#34;boe]!</description>
    </item>
    
    <item>
      <title>Snowcrash - Level12</title>
      <link>https://firelightflagboy.github.io/posts/snowcrash/level12/</link>
      <pubDate>Mon, 03 Aug 2020 15:57:10 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/snowcrash/level12/</guid>
      <description>On our home directory, we have access to a Perl script.
The script #!/usr/bin/env perl # localhost:4646 use CGI qw{param}; print &amp;#34;Content-type: text/html\n\n&amp;#34;; sub t { $nn = $_[1]; $xx = $_[0]; $xx =~ tr/a-z/A-Z/; $xx =~ s/\s.*//; @output = `egrep &amp;#34;^$xx&amp;#34; /tmp/xd 2&amp;gt;&amp;amp;1`; foreach $line (@output) { ($f, $s) = split(/:/, $line); if($s =~ $nn) { return 1; } } return 0; } sub n { if($_[0] == 1) { print(&amp;#34;.</description>
    </item>
    
    <item>
      <title>Snowcrash - Level11</title>
      <link>https://firelightflagboy.github.io/posts/snowcrash/level11/</link>
      <pubDate>Mon, 03 Aug 2020 15:56:10 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/snowcrash/level11/</guid>
      <description>On connection, we have access to a LUA script that is already running and its content is located in level11.lua.
The server #!/usr/bin/env lua local socket = require(&amp;#34;socket&amp;#34;) local server = assert(socket.bind(&amp;#34;127.0.0.1&amp;#34;, 5151)) function hash(pass) prog = io.popen(&amp;#34;echo &amp;#34;..pass..&amp;#34; | sha1sum&amp;#34;, &amp;#34;r&amp;#34;) data = prog:read(&amp;#34;*all&amp;#34;) prog:close() data = string.sub(data, 1, 40) return data end while 1 do local client = server:accept() client:send(&amp;#34;Password: &amp;#34;) client:settimeout(60) local l, err = client:receive() if not err then print(&amp;#34;trying &amp;#34; .</description>
    </item>
    
    <item>
      <title>Snowcrash - Level10</title>
      <link>https://firelightflagboy.github.io/posts/snowcrash/level10/</link>
      <pubDate>Mon, 03 Aug 2020 15:55:09 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/snowcrash/level10/</guid>
      <description>On connection, we are greeted by the 2 following file.
$ ls -l total 16 -rwsr-sr-x+ 1 flag10 level10 10817 Mar 5 2016 level10 -rw------- 1 flag10 flag10 26 Mar 5 2016 token Pseudo code The following Pseudo code is generated from level10
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49  int main(int argc, char **argv) { char *host; char *file; int socketfd; int fd; int rc; char buffer [4096]; sockaddr_in addr; if (argc &amp;lt; 3) { errx(1, &amp;#34;%s file host\n\tsends file to host if you have access to it\n&amp;#34;, argv[0]); } file = argv[1]; host = argv[2]; if (access(argv[1], R_OK) == 0) { printf(&amp;#34;Connecting to %s:6969 .</description>
    </item>
    
    <item>
      <title>Snowcrash - Level09</title>
      <link>https://firelightflagboy.github.io/posts/snowcrash/level09/</link>
      <pubDate>Mon, 03 Aug 2020 15:54:09 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/snowcrash/level09/</guid>
      <description>On connection, we have 2 files level09 and token.
First token is readable but it contains some non-printable char,
$ cat f4kmm6p|=�p�n��DB�Du{�� $ xxd token 0000000: 6634 6b6d 6d36 707c 3d82 7f70 826e 8382 f4kmm6p|=..p.n.. 0000010: 4442 8344 757b 7f8c 890a DB.Du{.... on the other hand, level09 require an argument.
$ ./level09 You need to provied only one arg. The argument is transformed into another string.
$ ./level09 aaaaa abcde $ .</description>
    </item>
    
    <item>
      <title>Snowcrash - Level08</title>
      <link>https://firelightflagboy.github.io/posts/snowcrash/level08/</link>
      <pubDate>Mon, 03 Aug 2020 15:53:09 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/snowcrash/level08/</guid>
      <description>On the home DIR, we have 2 files level08 with is following pseudo-code and token who is only readable be flag08.
$ ls -l total 16 -rwsr-s---+ 1 flag08 level08 8617 Mar 5 2016 level08 -rw------- 1 flag08 flag08 26 Mar 5 2016 token The Pseudo Code Here is the pseudo code for the file level08:
int main(int argc,char **argv) { char *needle; int fd; ssize_t n; char buf[1024]; if (argc == 1) { errx(1, &amp;#34;%s [file to read]\n&amp;#34;, argv[0]); } needle = strstr(argv[1], &amp;#34;token&amp;#34;); if (needle !</description>
    </item>
    
    <item>
      <title>Snowcrash - Level07</title>
      <link>https://firelightflagboy.github.io/posts/snowcrash/level07/</link>
      <pubDate>Mon, 03 Aug 2020 15:52:09 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/snowcrash/level07/</guid>
      <description>On the home directory, we have a file level07 with the following pseudo-code
int main() { char *cmd; asprintf(&amp;amp;cmd, &amp;#34;/bin/echo %s &amp;#34;, getenv(&amp;#34;LOGNAME&amp;#34;)) return system(cmd); } Explanation level07 retrieve the value LOGNAME from the env table,
then join the string at the end of /bin/echo and execute it
 Simple execution $ ./level07 level07  Changing the output $ LOGNAME=foobar ./level07 foobar   Poisoning the Env table  system(char *command) executes a command specified in command by calling /bin/sh -c command</description>
    </item>
    
    <item>
      <title>Snowcrash - Level06</title>
      <link>https://firelightflagboy.github.io/posts/snowcrash/level06/</link>
      <pubDate>Mon, 03 Aug 2020 15:44:15 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/snowcrash/level06/</guid>
      <description>On the home directory, we have 2 files level06.php with the following content and level06 which is a wrapper around level06.php to run it as the user flag06, thanks to his setuid
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  #!/usr/bin/php &amp;lt;?php function y($m) { $m = preg_replace(&amp;#34;/\./&amp;#34;, &amp;#34; x &amp;#34;, $m); $m = preg_replace(&amp;#34;/@/&amp;#34;, &amp;#34; y&amp;#34;, $m); return $m; } function x($y, $z) { $a = file_get_contents($y); $a = preg_replace(&amp;#34;/(\[x (.</description>
    </item>
    
    <item>
      <title>Snowcrash - Level05</title>
      <link>https://firelightflagboy.github.io/posts/snowcrash/level05/</link>
      <pubDate>Mon, 03 Aug 2020 14:35:25 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/snowcrash/level05/</guid>
      <description>When connecting to level05, we are greeted be the following line
You have new mail. The mail $ cat /var/mail/level05 */2 * * * * su -c &amp;#34;sh /usr/sbin/openarenaserver&amp;#34; - flag05 The mail content is a Crontab instruction that execute
sh /usr/sbin/openarenaserver as the user flag05 every 2 minute
The script #!/bin/sh  for i in /opt/openarenaserver/* ; do (ulimit -t 5; bash -x &amp;#34;$i&amp;#34;) rm -f &amp;#34;$i&amp;#34; done For each file in /opt/openarenaserver execute it as a bash script.</description>
    </item>
    
    <item>
      <title>Snowcrash - Level04</title>
      <link>https://firelightflagboy.github.io/posts/snowcrash/level04/</link>
      <pubDate>Sun, 02 Aug 2020 21:25:56 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/snowcrash/level04/</guid>
      <description>We have a file level04.pl with the setuid set
#!/usr/bin/perl # localhost:4747 use CGI qw{param}; print &amp;#34;Content-type: text/html\n\n&amp;#34;; sub x { $y = $_[0]; print `echo $y 2&amp;gt;&amp;amp;1`; } x(param(&amp;#34;x&amp;#34;)); Quick explanation The script take a parameter x.
That parameter is included in the string `echo $y 2&amp;gt;&amp;amp;1` (where y is our x value).
Then execute that string has a shell command then print its output.
Normally the script should print what we give it to params x.</description>
    </item>
    
    <item>
      <title>What is Environment Table</title>
      <link>https://firelightflagboy.github.io/posts/glossary/env_table/</link>
      <pubDate>Sun, 02 Aug 2020 17:02:58 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/glossary/env_table/</guid>
      <description>An Environment Table is a table that is accessible by each process
Some Environment variable to know about    name description     PATH used to list each directory to search for binary   HOME a directory to be considered as the home directory of the current user   PWD the current working directory    Source  Wikipedia  </description>
    </item>
    
    <item>
      <title>What is File Permission</title>
      <link>https://firelightflagboy.github.io/posts/glossary/file_permission/</link>
      <pubDate>Sun, 02 Aug 2020 17:02:49 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/glossary/file_permission/</guid>
      <description>Each file as his own permission set.
It allows to
 control the ability of the users to view, change, navigate, and execute the contents of the file system
 Notation for Unix system Permission can be seen in its symbolic notation using ls -l
$ ls -l total 16 -rw-rw-r-- 1 level03 level03 0 Aug 2 17:22 foo with ls -l the 1st column is used to represent the file type and his permission.</description>
    </item>
    
    <item>
      <title>Snowcrash - Level03</title>
      <link>https://firelightflagboy.github.io/posts/snowcrash/level03/</link>
      <pubDate>Sun, 02 Aug 2020 15:06:27 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/snowcrash/level03/</guid>
      <description>On the Home directory of level03 we have an executable file with the setuid file permission set
$ ls -l total 12 -rwsr-sr-x 1 flag03 level03 8627 Mar 5 2016 level03 Analyzing level03 By using the debugger gdb, we can disassemble level03 and inspect his ASM code.
1 2 3 4 5 6 7 8 9 10 11 12  $ gdb level03 -q Reading symbols from level03...done. Dump of assembler code for function main: (gdb) disas main .</description>
    </item>
    
    <item>
      <title>Snowcrash - Level02</title>
      <link>https://firelightflagboy.github.io/posts/snowcrash/level02/</link>
      <pubDate>Fri, 31 Jul 2020 19:28:20 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/snowcrash/level02/</guid>
      <description>On our home directory, we only have the file level02.pcap
$ file level02.pcap level02.pcap: tcpdump capture file (little-endian) - version 2.4 (Ethernet, capture length 16777216) level02.pcap is a file that contains TCP packets. I will use Wireshark to read the file.
just by looking at the TCP stream, we see that the user as entered a password (but beware of special chars)
we can use that password to connect as flag02</description>
    </item>
    
    <item>
      <title>What is Rainbow table</title>
      <link>https://firelightflagboy.github.io/posts/glossary/rainbow_table/</link>
      <pubDate>Tue, 28 Jul 2020 22:10:15 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/glossary/rainbow_table/</guid>
      <description>A Rainbow table is a table of precomputed-hash values generated from hash function. It is generally used to crack password.
Source  Wikipedia  </description>
    </item>
    
    <item>
      <title>What is Brute Force Attack</title>
      <link>https://firelightflagboy.github.io/posts/glossary/brute_force/</link>
      <pubDate>Tue, 28 Jul 2020 22:10:10 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/glossary/brute_force/</guid>
      <description>In cryptography, a brute force attack is when an attacker submit as many as possible passwords with the hope to guess the right password
Source  Wikipedia  </description>
    </item>
    
    <item>
      <title>What is Hash Function</title>
      <link>https://firelightflagboy.github.io/posts/glossary/hash_function/</link>
      <pubDate>Tue, 28 Jul 2020 21:48:30 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/glossary/hash_function/</guid>
      <description>A hash function is a function that can take data of arbitrary size and output data to fixed size. The output of a hash function is called:
 hash value hashes digest  For example a hash function can be used to map name to index in a fixed-size table (hash table) we call this process hashing
Source  Wikipedia  </description>
    </item>
    
    <item>
      <title>Snowcrash - Level01</title>
      <link>https://firelightflagboy.github.io/posts/snowcrash/level01/</link>
      <pubDate>Tue, 28 Jul 2020 21:36:02 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/snowcrash/level01/</guid>
      <description>When looking the file /etc/passwd, we see that the user flag01 has is hash password written in the deprecated password column
$ grep flag01 /etc/passwd flag01:42hDRfypTqqnw:3001:3001::/home/flag/flag01:/bin/bash It exists some tools to decrypt hash that used different attack method like brute force or wordlist. I will use john for this level.
We extract the line that contains the hash to password.txt
$ ssh -p 4242 level01@snowcrash grep flag01 /etc/passwd &amp;gt; password.txt [ .</description>
    </item>
    
    <item>
      <title>What is Rot Permutation</title>
      <link>https://firelightflagboy.github.io/posts/glossary/rot_permutation/</link>
      <pubDate>Tue, 28 Jul 2020 18:38:17 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/glossary/rot_permutation/</guid>
      <description>A Rot Permutation or Cesar Permutation is a method to transform a phrase into another by permuting char with another nth letter
generally we add the amount of rotation to the function name:
 rotXX | rot-XX where XX is the rotation count
 Example     1 5 10 13 26 &amp;hellip;     a b f k n a &amp;hellip;   b c g l o b &amp;hellip;   c d h m p c &amp;hellip;   &amp;hellip; &amp;hellip; &amp;hellip; &amp;hellip; &amp;hellip; &amp;hellip; &amp;hellip;    With rot13 hello world become uryyb jbeyq</description>
    </item>
    
    <item>
      <title>What is Ctf</title>
      <link>https://firelightflagboy.github.io/posts/glossary/ctf/</link>
      <pubDate>Mon, 27 Jul 2020 23:14:17 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/glossary/ctf/</guid>
      <description>CTF stand for Capture The Flag(s).
It&amp;rsquo;s a type of game/exercise were you, the player need to find the flag.
The flag is generally a string, but it can be represented in other way.</description>
    </item>
    
    <item>
      <title>What is Vm</title>
      <link>https://firelightflagboy.github.io/posts/glossary/vm/</link>
      <pubDate>Mon, 27 Jul 2020 23:03:11 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/glossary/vm/</guid>
      <description>VM stand for Virtual Machine, it&amp;rsquo;s a “machine” that will be run inside another machine. Crazy right ?
To use a virtual Machine we some software like VirtualBox or VMWare</description>
    </item>
    
    <item>
      <title>Snowcrash - Level00</title>
      <link>https://firelightflagboy.github.io/posts/snowcrash/level00/</link>
      <pubDate>Mon, 27 Jul 2020 22:51:34 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/snowcrash/level00/</guid>
      <description>On connection to level00, we arrive at an empty home directory
An interesting file Because we don&amp;rsquo;t have any file present in the home directory, we search for file related to the user flag00, our target.
First we search for with flag00 as owner
$ find / -user flag00 2&amp;gt;/dev/null /usr/sbin/john /rofs/usr/sbin/john Cesar, my old friend The file /usr/sbin/john contains an odd string but it&amp;rsquo;s not our password.
$ cat /usr/sbin/john cdiiddwpgswtgt  The filename john refer to a tool to find weak passwords of your users.</description>
    </item>
    
    <item>
      <title>Snowcrash</title>
      <link>https://firelightflagboy.github.io/posts/snowcrash/</link>
      <pubDate>Mon, 27 Jul 2020 22:43:44 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/posts/snowcrash/</guid>
      <description>Introduction Snowcrash is a VM in the style of a CTF.
You have 14 level to complete and get each flags
Summary  Level00: You lost something ? Level01: John, can you give me the flag ? Level02: I want a soda with my shark. Level03: Echo from the past. Level04: I found a Perl. Level05: A fight in the arena. Level06: Replace the elephant. Level07: You can&amp;rsquo;t log me. Level08: Can you read a link ?</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://firelightflagboy.github.io/about/</link>
      <pubDate>Mon, 27 Jul 2020 11:08:35 +0200</pubDate>
      
      <guid>https://firelightflagboy.github.io/about/</guid>
      <description>Hi there My name is Florian and I&amp;rsquo;m currently an IT student at 42
Experiences Beeldi Aug 2018 - Feb 2019   Fullstack JS Developer - Internship  - Developing on Firebase - Use of cloud function - Setup of the database - implementation of various user interface with React 
  Elite Golf 2017 - 2018   Android / Arduino Developer - School Project  - Design of electronic circuit - Development of an Android/Arduino Bluetooth apps to control a golf club cart</description>
    </item>
    
  </channel>
</rss>